ID,Title,Content,Creation Date
id1tug,Why did I spend 4 year getting a CS degree for Web Development when people doing coding bootcamp for a few weeks and are able to get same jobs?,"What the hell?

Did I waste my time doing CS if I want to get into web dev?

Seem like CS is more for thing like embedded engineering, data engineering, etc.

What is point of CS degree if i want to become web dev???",2020-08-20 02:21:58
kfcmbj,I've walked away from software development.,"Throwaway for obvious reasons.

I've spent the last year planning my exit strategy. I moved to somewhere with a lower cost of living. I lowered my expenses. I prepared to live on a fraction of my income.

Then I quit my job as a Principal Software Engineer for a major tech company. They offered me a promotion, I said no. I have zero plans of ever getting another job in this industry.

I love coding. I love making software. I love solving complex problems. But I hate the industry and everything it's become. It's 99% nonsense and it manufactures stress solely for the sake of manufacturing stress. It damages people, mentally. It's abusive.

I'm sick of leetcode. I'm sick of coding interviews. I'm sick of everyone being on Adderall. I'm sick of wasting time writing worthless tests. I'm sick of fixing more tests than bugs. I'm sick of endless meetings and documents and time tracking tools. I'm sick of reorgs. I'm sick of how slow everyone moves. I'm sick of the corporate buzzwords. I'm sick of people talking about nebulous bullshit that means absolutely nothing. I'm sick of everyone above middle management having the exact same personality type. I'm sick of worrying about everyone's fragile ego. I'm sick of hissy fits. I'm sick of arrogance. I'm sick of political games. I'm sick of review processes that encourage backstabbing. I'm sick of harassment and discrimination. I'm sick and I'm tired.

And now I don't have to deal with it anymore.

I've never felt happier. It's as if I've been freed from prison.

I won't discourage anyone from pursuing a career in software, but I will encourage everyone who does to have an exit plan from day one. One day, you'll realize that you're rotting from the inside out.

**Edit**

I wasn't expecting this many responses, so I'll answer some questions here.

I'm in my early 40's and I've been doing this since college.

I didn't get a large sum of money, I simply moved to a small place in a small town where I'll be taking a part time job working outdoors. I was living in a tech center with a high cost of living.

I've worked at 7 companies, including Microsoft and Amazon. The startups were much nicer, but they become more corporate over time.

Finding a good company culture is mostly luck, and I'm tired.

&#x200B;",2020-12-18 02:59:09
hvuscm,"Reminder: ""we're a family here"" is bullshit","I've been in the industry for a long time now. I have worked at 2 startups and both have pulled the ""we are a family here"" line on me. Well to any young job searcher reading this, I want you to know that this is the reddest of flags. Here is a story what I have experienced at my ""familiar"" company.

- CEO says we are stronger together at the beginning of COVID and that we can ride out the wave. 1 month later he lays off half the company without warning. There were two meetings you were invited to, if you were in 1 you stayed, if you were in another you were gone. No notice. Great way to treat ""family"" eh?

- Chat room was opened up for people to support each other in the times of COVID. Many people posted things like ""we can't be expected to be as productive when we have kids at home during a pandemic"" which is true. It just so happens that those same people are now gone.

- Came out that a manager was harassing some of his employees. When they went to HR they defended him and the employees left the company. The harassing manager is still there.

- People filled out ""anonymous"" surveys. 2 people who gave negative feedback were gone the next day.

Of course, my only family is my wife and children. I just wanted to share that some of the most toxic places I have ever worked spout this ""family"" nonsense. Watch out for it.",2020-07-22 14:30:54
jsrmtw,Remove CS and replace with Leetcode Engineering,"Listen to my brilliant idea: We should create a new college major: Leetcode Engineering

Year 1: cover basic Python

Year 2: leetcode easy

Year 3: leetcode medium

Year 4: leetcode hard

Result? PROFIT?: Tech job at GoOglE


After a long and worthy prior post battle, I have decided it is best to create a new college major focused on Leetcoding 24/7 to guarantee entry into a top tech company since CS is just so useless right.

You have research experience? Scrap it

You have 30 side-projects? Scrap them

You are fluent in 4-5+ coding languages? Focus on Python

You are top rank of your CS university? Scrap it, drop out now.

Your key to success is to leetcode, leetcode.


Thoughts or questions are welcomed.",2020-11-12 09:14:52
g7z78b,I FREAKING DID IT!!,"I'm so excited guys. After over 200 applications , 20+ interviews, and a lot of almost giving up, I GOT A OFFER WITH MY DREAM AEROSPACE COMPANY. Crazy thing is... I didn't even have to do a dumb ""code this"" technical interview. I get 60K starting off! with a bonus!! That's amazing starting off in the South. Crazy thing is someone who works there , while I was doing a internship, told me they wouldn't hire a black man straight out of college. I'm glad I kept trying. Shoutout to r/cscareerquestions for all the help in this process.

Edit: Thank you all for the kind support! It means a lot to me. Just to clear up a few things. I graduate with a Bachelors in CS in a few weeks so I'm not self taught. To address the lack of diversity in STEM, do your research. The data is out there, the accounts of what people go through are out there. Educate yourselves and fix the problem. Most of our jobs is googling so you can do it haha.

Edit 2 : Since people are asking, I'll go into a little bit of my background. I am graduating with a Bachelors in Computer Science W/ a minor in Mathematics in a few weeks. I have had a internship every summer of my undergrad which includes two summers at a really famous science institute and 1 at a REALLY famous space company. During my time at both companies and in undergrad, I built up a crazy professional network of people I could rely on for information and some for a recommendation. A awesome woman at said space company, recommended me to her friend on another team and I got the interview then the job. So what else did I do in terms of the crazy amount of interviews and applications? I did some Hackerrank, Leetcode, and messaging recruiters on LinkedIn which helped me get interviews. Polishing my LinkedIn helped me get way more traffic and I got a Google interview doing so. I also used organizations like NSBE & ACM to help me get interviews at conferences or find resources. My resume also went through numerous changes over the span of my applying to jobs (August - Now). In terms of job sites, I used everything. LinkedIn, USAJobs, Handshake, Hired.com, Indeed, Seen, etc.",2020-04-25 19:02:47
g4viz4,"Scrum Master wants to visit each member of the project at home ""in order to understand the work from home experience for a developer.""","She just told us in our daily standup that she wants to visit each member of the project at home in order to give advice on how to rearrange the interiour for more productivity, wants to talk with family to identify distractions and wants to sit right next to someone in order to see working from home. 
What should I do? That sounds really uncomfortable to me because I'm quite introverted and I don't think that this will help me.",2020-04-20 16:05:07
idqtgo,"I (M,1), am having difficulty in finding jobs in my field of study.","Being a neonate, I often find that professional spaces tend to greatly discriminate against me - often times, I attend interviews, only to be vigorously patronized and coddled. 

Last week, I attended a virtual interview for a developer position at Goldman Sachs. For the upcoming months, I poured over ""Cracking the Coding Interview"" by Gayle Laakmann McDowell and completed MIT's 6.006 course. I wore my best slacks, but despite this, my interviewer dismissed me the moment I came onto the call. I have difficulty enunciating, as I have no teeth, and due to this lacking of mine, my interviewer began to coo at me, saying ""Who's a smart boy? Who's the cutest boy in the world?"". He then turned to someone off camera and said, ""I think someone just... left their kid at the computer and didn't show up for the interview...?"" Fools! How insulting.. my parents are gainfully employed. And I knew the answer to his query, ""who's the cutest boy"" was me, of course - my mother tells me as such daily, but what could I say to that clear repudiation of my technical skill? 

One interview, in particular, sticks out in my mind as being the worst instance of neonate-ism that I have experienced in my lifetime. I will not name names, but at this interview, I was bounced from lap to lap, fed liters of milk, and my suit was ruined by the slops of Gerber 2nd Food Tube Vegetable Beef Baby Meals! 

 I want to be taken seriously in my career, I have the skills. I'm an avid contributor to many JavaScript open source projects and I understand the ins and outs of neural networks. I am starting to believe that they don't want to test my coding skills after all... perhaps my fatal flaw is the lack of years of experience with each language. I feel as though my coding prowess itself is adequate, however, I have only been coding for the last five months, as that is when my fine motor skills had developed sufficiently for me to type. Prior to that, I was reading up on CS theory, discrete mathematics, and linear algebra. I suspect that my interviewers are seeking out employees with more months of experience. 

I'm wondering if others have experienced something similar in their travails in technical coding interviews. How do I overcome my deficient experience and showcase my skills?",2020-08-21 05:25:07
j14267,I was humiliated because my undergrad is EE and not CS,"This happened a few months ago. I was called by a HR person who told me that they were interested in my profile. After getting a perfect score in their easy leetcode questions I was scheduled a final interview with a mexican dev (I'm from Colombia).

And then it started. That guy didn't read my CV before the meeting and got angry when I told him that my undergrad was in EE and not CS. He spent almost 15 minutes berating me about it. ""Can you really program at all? what are you doing here? you won't be able to get anything done"". After his speech about how I didn't have the knowledge needed to get the job, he saw that I got a perfect score in their assessment. Then he gave me 5 minutes to talk about my experience and the interview ended. I thought about telling the HR person who started the process, but they ghosted me after this interview.

I'm quite angry about it, specially because I never applied. It was their HR staff who got in touch with me.",2020-09-28 02:41:11
jb3nrf,Not a question but a fair warning,"I've been in the industry close to a decade now. Never had a lay off, or remotely close to being fired in my life. I bought a house last year thinking job security was the one thing I could count on. Then covid happened. 

I was developing eccomerce sites under a consultant company. ended up furloughed last week. Filed for unemployment. I've been saving for house upgrades and luckily didn't start them so I can live without a paycheck for a bit.

I had been clientless for several months ( I'm in consulting) so I sniffed this out and luckily was already starting the interview process when furloughed. My advice to everyone across the board is to live well below your means and SAVE like there's no tomorrow. Just because we have good salaries doesn't mean we can count on it all the time. Good luck out there and be safe.",2020-10-14 16:11:10
kign0f,"I've worked in HR for ~15 years, and I've managed teams for 10 years. As a covid side project, I'm going to create ""The Essential Guide to Getting Promoted at Work"" that I'll be happy to share here for free. What questions or challenges do you have? What can I include that you'd find helpful?","I've been in the ""back room HR discussions"" about which employees should vs. should not get promoted. I've seen what really gets the attention of senior leaders and what doesn't, etc.

I see my friends, colleagues, and team members usually trying all the wrong things to get promoted. So I decided to put all of my experience (and wisdom?) together for folks to read.

What info would be most helpful for you? I'll share the link here when I'm finished, likely by the end of January.

P.S. - I'm a CS grad. I started as a Software Engineer and then gradually transitioned to HR. Weird, I know. We'll save that for another post.

\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*

EDIT: The guide is ready!

[Here's the 38-page PDF.](https://www.dropbox.com/s/e2og9e9an7sler2/The%20Essential%20Guide%20to%20Getting%20Promoted%20at%20Work%20v1.pdf?dl=0) It's hosted on Dropbox, no login needed.

I hope it's helpful!

I'm making it available for free on reddit for one week. After that, it'll be a paid download available on Gumroad. Get it now!

\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*\*",2020-12-22 23:17:48
ih1coi,I finally got out of the kitchen.,"I've been working in kitchens my whole life. I was expelled and dropped out of 4 high schools. I had a 9th grade education until I was 25. I've been in college(didn't finish, gotta work) or self-studying ever since. I turn 30 in January...

I just got a job as a Computer Technician.

I'm not a Software Developer yet...

But I finally got out of the kitchen.

No more asking to use the bathroom. No more being on the political whim of opinionated and equally uneducated managers. No more grown ass men (or young assholes) making inappropriate comments about underage coworkers, race, politics, or drugs; I'm an internet edgeboi, but even I know when to stfu and focus on my work. No more 135°F(57°C) kitchen with face masks. No more ""broken"" air conditioning that corporate can't ""fix"" or ""turn on remotely"".

I get to swap RAM, flash BIOS, and do general stuff a pc user with a sliver of curiosity could find out...

But I'm out of the kitchen.

I'm touching computers for a living. That's all I can ask for right now.

rants over...go code something!",2020-08-26 15:51:28
hcojjv,"As a minority/POC, I am tired of seeing ""woke"" changes by corporations but not actual changes to fight against racism.","As a minority/POC, it does not affect me at all with the words ""master"" or ""slave"". 

To me what helps to solve racism is to show transparency with their process/company. 

For example, publish the salary differences of the ""Same Position"" of different races. Heck, publish everyone's salaries. i am tired of finding out my coworker of a different race gets paid more than me for the same work. Like I can understand like 10% difference but not more than 35%. Anecdotally i have heard this from several POCs but I can never know for sure until the companies provide the info. 

Or one action is to completely anonymize the resumes and applications. I personally have tested one of the popular studies where ""latino names"" gets fewer callbacks than ""white names"" and I was so surprised that it worked for myself too. Heck even my university completely anonymize my assignments and exams in order to prevent bias from grading. Why can't we do the same in jobs. 

Sorry i just wanted to rant. I am just tired of companies getting praised for ""linguistic changes"" and not calling them out for not doing actual company changes. I apologize if this is going against the rules but I just wanted to share my thoughts as a POC.

EDIT: Wow this blew up. I am so glad that we are having this discussion. 

Just wanted to add some following points. 

When i said that I am not bothered by the words ""Slave or master"" I do not mean that all POCs don't mind that. This was just a personal rant. I do not want to define what POCs want. 

And yes removing the slave or master is great and I am not particulary against it to be honest I am pretty indifferent to it. What I am specifically against that people will claim that these linguistic changes WILL LEAD to change. 

In my opinion, this will stop further changes because the corporations will think that they have done enough because the public opinion is happy about it. That is where I am frustrated on.",2020-06-20 15:53:49
ifcc9e,"Is there anyone else who just works 8 hours a day, and doesn't do any leetcode or projects in their spare time?","Title.

If I'm being honest, I got into CS because I do enjoy working with technology. However, I wouldn't exactly say it's something I'm passionate about.

For me, it was just a way to get a typical 8 hour office job that offers good work life balance and little stress. 

If I HAD to work in some field, CS would be it. But I wouldn't (and don't) do it in my spare time. I have other hobbies.

Is there anyone else like that here? Just works a super chill 8 hours per day and then forgets about work / CS / programming? someone who doesn't grind leetcode or do projects in their spare time?",2020-08-23 22:02:47
k6b8nw,Ouch. Failing a tech screen is painful.,"Just went through it with Facebook. Did 100+ hours of prep. Tech problems at the start -- couldn't hear the interviewer at all. Got that sorted, but under interview pressure my wits and even my typing skills deserted me. :P

Got a nice email from the recruiter telling me not to be discouraged, and I can apply again in a year. Hey, I'm 55 -- I was surprised when she messaged me on LinkedIn. Surely I'm too old for Facebook. Probably fulfilled a quota to show they don't discriminate based on age. :D

I have to say it *is* discouraging to see the DS&A coding interview defended by people saying ""it's to see if you're smart enough."" Dude, I have a PhD in mathematics and 9 years of experience as a developer. Anyway, I have no real point to make except that I know I'm not the only one whose been through this, but it does feel kind of bad and I can't help doubting myself at least a little. And I actually love data structures and algorithms -- because it's all really mathematics!",2020-12-04 01:53:08
j810n5,Big M is letting employees work from home permanently,"From now on, all Microsoft employees can work from home for <50% of their work week or 100% if approved by their managers. 

Employees who opt for the permanent remote work option will give up their assigned office space, but still have options to use touchdown space available at Microsoft’s offices.

Employees will also be allowed to relocate domestically with approval, or even seek to move internationally if remote working is viable for their particular role. While Microsoft employees will be allowed to move across country for remote work, compensation and benefits will change and vary depending on the company’s own geopay scale.

[article](https://www.theverge.com/2020/10/9/21508964/microsoft-remote-work-from-home-covid-19-coronavirus)",2020-10-09 15:27:19
emu8oq,"My self-taught (no degree) journey to a Big-N offer. Within 3.5 years, went from 50k to 256k.","**Where**: Silicon Valley


**Highest Education**: High School


**Current Age**: 33


**Type of work**: Mobile (iOS)


**Salary Progression**:  
Job 1: (Age 27, Data Entry, 33k)  
Job 1: (Age 28, Manual QA, 40k)  
Job 1: (Age 29, Manual/Automated QA, 50k)  
(Age 31, Published a mobile app during Job 1, which helped me land Job 2)  
Job 2: (Age 31, Junior Software Engineer, 100k)  
Job 2: (Age 32, Software Engineer, 120k)  
Big-N: (Age 33, Software Engineer, 256k Total Comp), also received 40k signing, so 296k for first year  


**Story About me**: I've been so fortunate to fix my life in my early thirties.  I always wish I could have found success from my early 20's, but I was just a complete fuck up.  All I did in high school was play Starcraft, Counter Strike and Diablo 2 all day every day until 2-3 am most nights.  I was falling asleep in class most days and I almost got held back a year because my grades were so unsatisfactory.  I thought this was the worst of my addiction to computer games, but little did I know, that was actually nothing.  


When it comes time to start trying to get my education back on track through community college, I found a game called World of Warcraft (lol).  As you can tell that I started listing my salary progression at the age of 27.  Yeah, I didn't work until then because I was legit one of those people everyone meme'd about dudes living in mom's basement.  I became one of those elitist World of Warcraft raiders that was in a world top raiding guild.  I would practically be on WOW servers for 12+ hours every day and raiding for 6 out of 7 days.  This is all I did coming out of high school at 18 to 27.  I managed to get some good grades in some math classes in college (Math was the only subject I was naturally decent at) but everything else was an F or a D.  Funnily enough, through WOW, I did meet this one guy that knew how to code and would show me some of his work.  I was always very intrigued by some of the addon's and bots he created for some of the games we played.  When I eventually started to really learn programming, he was definitely one of the guys that would help me out understand some concepts, but he didn't have any real industry experience.


When I was around 27, I picked up a data entry job that paid close to minimum wage.  The company itself had a tech department as their main product was technology based and they had a website and mobile apps.  About 6-7 months in to my data entry job, I had some basic understanding of HTML, CSS, Javascript, mostly from videos and messing around in text editors.  It was around this time I emailed one of the managers, managers of the data entry department inquiring about entry level dev jobs.  The manager mentioned that at my level, quality assurance might be a decent role to start with, which I agreed with. 


Once I started the QA job (mostly manual testing) is when I first really started to understand how developers worked.  I was fortunate in the fact that most of the developers there were incredibly nice and were more than willing to show me what they were doing.  After about 6 months of manual QA work, I started to learn how to leverage Python and the Selenium framework to start building automated tests.  I ran in to a lot of road blocks in really refining the tests as most of the developers never really worked with Python in their day to day job and didn't have experience with Selenium, so I would be stuck trying to figure stuff out on my own.  This eventually ended up me leaving the automated tests behind.


I eventually got some renewed motivation learning coding again, but this time iOS development.  I think this was mainly because I had an iPhone and I already had really great relations with the iOS team (If I ever got stuck with concepts, I could poke them for some help).  I realized pretty quickly, despite me really grasping iOS development and even having pushed PR's to the production application, that I was not going to be able to officially slide to an iOS role naturally at my current job.  I took time at home to start developing an iOS game.  I really made sure to make sure that the game was refined and felt complete before publishing.  After about 4 months of development and publishing, I started to apply for junior iOS roles.  I also picked up Cracking the Coding Interview during this time to try and study.


I landed 2 different entry level interviews.  One with some referrals from an old co worker and another from a cold application.  I was pretty lucky in the fact that neither asked tough coding questions as at this time I could barely solve leetcode easy.  We mainly talked about my published iOS app and how I designed it and what were some of the technical challenges I had with it.  There was definitely a good bit of iOS specific knowledge testing as well.  Eventually chose the job that had a really great opportunity to build a brand new app from the ground up for an already successful company.  After about a year in to this job, I really started to get a lot of recruiters reaching out to me on Linkedin.  I only really entertained the unicorns/large tech.  I was OKAY at best with leetcode mediums (Probably solve them at a 50-60% rate), but I always tried to solve them even if I was not actively interviewing.  I knew this skill was the lifeline of getting another job once recruiters started reaching out to me.


Eventually, after failing a few other interviews, I was able to pass a Big-N interview and was given the 256k total comp offer.  I wouldn't say I was particularly great at leetcode.  I think there was definitely luck involved.  Some coding interviews I crushed while others I failed miserably.  This probably has to do with my comfort level of the types of questions being asked (ie. Array type questions vs graphs).  I will say this, I do not think I'm a shining light of technical capabilities, but I think I do come off as a person people would love to work with.  In general, I'm very polite, friendly, and fairly easy to talk to.


**Key Factors**:  


 - Having a mentor.  When initially learning, I got stuck on a lot of concepts.  I really tried my hardest to figure things out for myself as I generally do not like bothering other people, but sometimes it's just necessary to have someone there to just break down a wall for you


 - Educational content I went through that I will list below


 - Getting a published project out initially, so that prospective employers has something they can download and talk about with you


 - Networking.  Granted, I did have another junior dev offer from a job that was not from any networking, but the job I did choose was from co-workers I worked with when doing QA


 - Linkedin.  After about a year in to my junior dev role, recruiters from all sorts of large tech companies started reaching out to me.  At this rate, I do not think I'll have to cold apply to most of these guys ever again.


**Content I used to self teach (I recommend this in the order I list them for beginners)**


Harvard CS50: https://www.youtube.com/watch?v=y62zj9ozPOM&list=PLhQjrBD2T3828ZVcVzEIhsHVgjANGZveu  


(The only paid content I will list) Udemy Angela Yu (Honestly, any course by this instructor will be great.  Her iOS and web courses are amazing.  She is very enthusiastic about teaching, not boring to listen to and it is very refreshing): https://www.udemy.com/course/ios-13-app-development-bootcamp/   


Stanford CS192 (iOS): https://www.youtube.com/watch?v=71pyOB4TPRE&list=PLPA-ayBrweUzGFmkT_W65z64MoGnKRZMq   


Youtube channel Brian Voong (Brian creates some of the biggest iOS apps from scratch and shows you): https://www.youtube.com/channel/UCuP2vJ6kRutQBfRmdcI92mA/playlists  


For interview practice:


www.leetcode.com


This guy is AMAZING.  Helped me grasp a lot of algorithms https://www.youtube.com/channel/UCmJz2DV1a3yfgrR7GqRtUUA/videos


Sean Allen covers some iOS topics you will definitely see in iOS interviews: https://www.youtube.com/watch?v=56ZO6Gg68tw",2020-01-10 17:33:57
j2ilvu,Just so we're clear! Working remote during a pandemic isn't the same as working remote in principle!,"I saw a highly upvoted post where the theme of the post seems to be that, people enjoyed working at home in the beginning of the pandemic but now they feel depression, loneliness, lack of motivation.

I'm someone who not only greatly enjoys working from home, but also benefits from it personally due to having a newborn baby in my life.

But despite the fact that me enjoying working from home is somewhat biased, you should understand that right now you're not working from home because of company policy or because rent is expensive for an office. You're working from home because we are in the middle of a pandemic due to a respiratory disease carrying virus that has officially killed over 1 million people (probably more, realistically) that has no vaccine yet.

This means:

1. You typically can't go out as much as you could during normal times.
2. You don't see your friends as often as you normally would.
3. A lot of movies, TV shows and sports events have been cancelled.
4. People are terribly sick or their close family or friends have died from infection, therefore people are just generally down.
5. Fear has a huge impact on your well being.
6. A lot of slowdown in the economy, and the economy health has a direct impact on overall social morale.
7. Civil unrest because people aren't happy to be locked down or shelter in place, this civil unrest leads to political and social unrest and protesting.
8. The gym is considered a super spreading area, so a lot of people are going to the gym less and working out less. Physical exercise has a direct correlation with reduced depression.
9. Even if you have vacation days, borders to a lot of countries are closed so most people aren't traveling and instead just saving up vacation and not taking days off since they don't have anything to do with the time off.

During **normal times**, if you were allowed to work remote, you would be able to go to the gym, visit your friends, have parties, go to the movies, your favorite movies would actually be released, your favorite businesses would be open and healthy, you'd be able to eat out with your friends, socialize, go on dates, be in large crowds...

Right now, you are working remote as a form of staying SAFE, but not as a form of finding a healthy alternative to working in an office. This would be like hating basements because you're stuck in a basement during a tornado.

A lot of companies are taking solace in the fact that the pandemic has led them to realize how unnecessary expensive large offices are. And how wasteful they are. Time you spend on trains, buses or stuck in traffic is time you don't spend resting, enjoying your life, being with family or even just working while your energy is high.

Companies are hoping that they can find some new way of normal work life after this pandemic that is surviving and strong, something that won't just shut down if another pandemic happens. When the vaccine comes, I encourage you to try working from home again when times are normal and you have a normal social life.

I promise you, you'll enjoy it a lot more when it's not just ""work from home"" but also ""stay home as much as possible so grandma doesn't die"".

If you are feeling depressed during work from home/pandemic precautions:  

I encourage you to please do yourself a favor, take a day off and try to go somewhere where a crowd isn't large and try to relax and enjoy yourself for a day. Your mental health should come first over any decision about efficiency or ""saving your vacation for when the pandemic ends"". I took a week off even though we can't really travel and I played my favorite games, had a picnic on my balcony, went for a walk in a mostly empty park with my dog. I felt really good when it was over even though I didn't travel. ",2020-09-30 08:56:47
j608hq,I made an Chrome extension that adds Glassdoor ratings to companies on Linkedin to help you guys with your job search,"[inDoors](https://chrome.google.com/webstore/detail/indoors-show-glassdoor-ra/eapcedpgnlmgkigiieacngkpdjikfgci?hl=en&authuser=0)  [repo](https://github.com/CalvinWu4/inDoors)

Screenshots: [https://imgur.com/a/Yb1rAbR](https://imgur.com/a/Yb1rAbR)

This has been done before; see [post](https://www.reddit.com/r/cscareerquestions/comments/3skxwd/linkedin_glassdoor_chrome_extension) that was posted here 4 years ago. But, I got it to work with the current LinkedIn UI and added more features than what was offered previously.

Good luck on the hunt!

EDIT: Due to popular demand, get your Firefox extension [here](https://addons.mozilla.org/en-US/firefox/addon/indoors/)

EDIT: Handshake, Google for Jobs, Indeed, Stack Overflow are now also supported!",2020-10-06 06:33:31
jjqw74,Be the Change You Want To See: Start Refusing Unpaid Take-Home Coding Assignments,"Some reasons why: 

1. Take-home coding assignments are grossly inaccurate at determining someone's actual ability to engineer software. They favor cookie-cutter solutions (less to incriminate) and say nothing in respect to your capabilities in a real-world coding environment.

1. It's virtually impossible to distinguish an authentic test from a honeypot, and completing a take-home in no way further guarantees an offer (they steal your time, your labor and your intellectual property).

2. Taking these assessments signals to companies that you are willing to do additional work without getting paid (untracked overtime, crunch, support and operations schedules).

3. These assessments work to set an industry standard where protracted, throwaway and overly-intensive interviewing processes are seen as okay.

Companies love to waste your time, because maintaining an arbitrarily negative hiring rate means that they don't have to invest in their interviews or workplace culture. Instead, they give you what is effectively an IQ test, one that comes with all of the same historical and cultural biases.

This is the status quo at it's finest.

Be the change you want to see: start refusing unpaid take-home coding assignments.",2020-10-28 16:22:22
i0kdyd,Remote work is a nightmare for junior employees,"Its very hard to get mentorship and learn from senior people if you are a junior who has a ton of questions when starting out their career and don't have experience handling a project end to end. Every question or doubt you have in mind now has to be either a meeting or a ping which can get annoying to the other person if done frequently over the course of the work day.

I am a junior who came into the workforce less than a year ago and finding it very hard to cope with deadlines as I am given new technologies to work with little mentorship.",2020-07-30 11:26:54
ibtrox,I'm 33. Starting my CS degree on Monday!,"I posted around a year ago with one of those ""I'm older now, but I like computer, can I do this?"" essays. Just wanted to say thanks to everyone for being nice and offering lots of helpful advice.

I decided to go with boot camp at first. In preparation I did Udemy courses. Then the world locked down and I lost my job so I studied way more. Shortly after, my boot camp of choice Flatiron Atlanta decided to permanently close. I started feeling a little lost and wondering if trying to get hired anywhere in the next year made sense anymore.

So, I looked up my old college where I still have those 2 core credits under my belt (and 3 W's), and lo and behold they let my ass back in! We're going all the way from freshman to B.S. in C.S. and I can't fucking wait! My stomach is in knots because I don't remember how to do calculus or write papers but the smile on my face won't go away.

Hope this can inspire the next guy. Also I would so gladly welcome any amount of advice from people who have been in my place. Thanks Reddit. I'll post again in 5 years when I get hired.",2020-08-18 03:51:48
ia8lnc,"People who complain about not finding jobs in this sub are too spoiled by the advertised salaries, think way too highly of their talents, and are obsessed with leetcode.","The majority of posts I’ve seen where people complain about jobs have the same kind of structure.

“I’m a new grad / boot camp grad and I have little-no experience with no projects and I can’t find a job. I’ve been grinding leet code for weeks / months and can do Hards but it’s not helping. I’ve only been applying to Fortune 500 companies and FAANG in the West/East coast and now I’m burnt out”

I graduated with a non CS degree, okay GPA, and a year worth of non-CS job experience. I applied for ~30 companies, got 2 interviews, and 1 offer. I didn’t get “lucky” I just applied to small companies in the Midwest. I didn’t even look at FAANG. I don’t have a stellar paycheck of $80k starting but I’m happy enough starting at $58k knowing I can find a new job with a years worth of experience that pays better. Also, a low paying job is better than no job. 

I have not once looked at any leetcode type website. My technicals were easy enough to problem solve through in those two interviews. I had 2 java based projects on my resume. Leetcode DOES NOT MATTER PRE-INTERVIEW. Even during the interview if you can reverse a linked list but botch your STAR interview questions you’ll flop. Projects to put on your resume that you can talk about are much more important. I’d venture to say the majority of SWE positions do not even do leetcode style programming day-to-day.

Stop grinding leet code. Stop only looking in densely populated areas. Stop only applying to large companies. Stop thinking you’re gonna start your CS career at $100k a year. Your career is a marathon and not a sprint. The company I got an offer from said they had 3 spots open for months, and I was the first eligible candidate to apply. The 2 other spots just got filled last week (so, ~6 months from job posting)

Edit: I guess people are still reading this post for the first time so I’ll address some common comments:

1) I said I had technicals for my interviews. This means leet code style problem and explaining space and time complexity. I didn’t need leet code to prepare for this. 

2)I’ll reiterate leet code is not important PRE-INTERVIEW. If you manage an interview with a company then it’s a great tool to brush up on your problem solving skill. Most posters I’ve seen on this subreddit do not manage to make the interview stage, making leetcode obsolete.

3)You can have dreams to work at a big company, and you should definitely work towards it. But if you don’t have the experience/gpa then stop burning yourself out with rejections from huge companies that can be picky with candidates. A smaller company that pays less can be a great stepping stone.

4) If you have been applying to bottom of the bucket jobs and still not having luck, I apologize for the post, this isn’t directed to you. Tune your resume and work on projects instead of leet coding if you can’t land interviews. 

5) I never said you had to move to the Midwest. There are small low paying tech jobs all over the states. These aren’t as good when in a HCOL area, but again, these are a stepping stone.

6) I went on indeed and looked up “computer science in “{Specific state in Midwest}, United States” and sent an application to anything asking for < 5 YOE. I tailored my resume to focus on my skill with Java, which landed me a back end java job.",2020-08-15 14:48:13
j7gimm,Unpopular Opinion : Actual machine learning work is not nearly as fun as people think it is.,"The **results** of ML algorithms and software are really cool. But the actual work itself is nowhere near exciting as I thought it would be. I've completely shifted my focus from ML/AI to Data Infrastructure and although the latter is less flashy, the work is also much more fun.  


From my experience, a lot of ML work was about 75% Data Curation, about 5% building pipelines and designing systems, and about 20% tuning parameters to get better results. Imagine someone gave you a massive 10 GB excel sheet, and your job is to use the data to predict sales; the vast majority of your work is going to be trimming the data and documenting it, not actually building the model.  


Obviously this is only based on my opinion (you might have a much different experience). But as someone who has worked in multiple subfields including ML, infrastructure, embedded, I can very honestly say ML was my least favorite, while infrastructure was the most fun. The whole point of data infrastructure is to build systems, classes, and pipelines to maximize efficiency... so you're actually engineering things the whole day at work.  


But if you want a cool job to brag about at parties, then ""I work on artificial intelligence"" is basically unbeatable.

Edit : Clearly this is a popular opinion",2020-10-08 16:42:58
kn2hfu,"Anyone else got tired of ""self-taught developers"" who think they are engineers after completing 6 weeks Javascript course?","seriously it became irritating, every company I worked for had at least one jr developer who doesn't know shit about data structures or algorithms, cannot think pragmatically and expect mid or senior levels to be available 24/7 to fix their shit. 2 of my senior colleges left after learning that bootcamp grad who can't really code is earning almost the same amount with them. 

I know there are amazing self-taught devs out there but majority of them are people who got tired of their ex-jobs and heard SE has a lot of money. Eventually they waste their money on sketchy 6-week bootcamp that claims making mediocre websites equals being a full stack developer. they don't care about architecture, code quality or performance but land on jobs. 

I guess they are the reason of why tech interview process is broken (whiteboard, tech screening, system design, leetcode etc..)

what are your opinions?",2020-12-30 13:42:26
gvdyfu,FINALLY GOT A JOB!!,"After about a year of applying, four months of religiously applying. Got in about 129 applications, I received 8 interviews, and got 1 offer. I’m so glad to say I finally got a f**king job. I will be working as a developer for the same company I worked with for my capstone project, and will be continuing to work on that same project. About damn time! If I can get a job, I damn well know anyone looking at this post can get a dev job.

Edit: I see this post got A LOT of traction, so I’ll answer some of the most asked questions I’ve read. Like I said, I am working with the company I worked with in my capstone project. I got super lucky with that. I never had any internships, had a 3.2-ish GPA. Some silly web apps as my projects. I’m not some A-grade Ivy Leaguer who created a new form of Facebook or anything. I’m just a basic simpleton who ended up with a job and got lucky. Like I said, if I can get a job offer, so can you. I guaren-F**KING-tee it. I have faith in all of you. Also if you have questions, please PM me bc I tend to ignore comments and don’t have notifications on them in case they blow up and my phone goes off for days.",2020-06-02 19:28:31
hfrlg1,Just a friendly reminder,"The majority of us are currently working remote, and some of our companies have even begun hiring again. With this in mind, it's important to note that written communication is inherently received with a negative bias.

A simple message over Slack, especially to a new employee or employee in training, may be received with a negative tone. For example if a new Associate SWE asks you question and you reply with just a ""no"" or ""ok"", it may not be intentional negative but could be read that way.

I've seen this quite a bit with newer SWEs where they start off by asking a lot of questions, but if their mentor is very short with them, the questions start to slow down as they feel like they are negatively responding to them by being short.

Just a simple reminder to us all!",2020-06-25 18:42:34
khrsw5,"I'm a liberal arts major who received a full-time SWE job offer, my experience breaking into tech","I was starting my last year of completing my liberal arts degree when I decided to teach myself how to code in Python. I took my first CS class later that year and fell in love with it, and decided I wanted to pursue software engineering.

I had a lot of cards stacked against me, I was a recently homeless woman of color in a low-income, single-parent household, and it was too late for me to pursue a CS degree. I decided to take as many CS classes as possible and decided to teach myself everything else along the way. I knew my tech skills weren't the strongest, but I had professional work experience and always excelled at soft-skills. I was able to find a tech-adjacent job and that job helped me land more formal CS experience. I took a lot of advice from this subreddit; I went to hackathons, did Leetcode, and contributed to open-source projects. Unfortunately I ended up graduating into a COVID recession, but after 3 months of applying aggressively (close to 800 applications), screwing up technical interviews, etc. I finally landed \*one\* full-time software engineering job offer. It's not FAANG or a tech company for that matter, and the location is not ideal, but the salary is great and I know it will open a lot of doors for me.

I wanted to share my experience to show that you can succeed in this field with an unconventional background. Tech skills are important but your soft skills are indispensable - I'm certain that my soft skills are what helped me land this job. I'm happy to answer any questions or hear from other people with a similar background/experience.

Edit: Wow thank you for all the awards and positive comments! I noticed there is some confusion about my timeline in the comments, so I wanted to clarify that I ended up taking another year of college to take as many CS classes as possible. I have a little over 2 years of programming experience now.",2020-12-21 22:23:52
im25q8,"Not going to lie, the greatest thing about being Experienced is being able to say no to Leetcode questions.","Nothing really else to add.  It just feels pretty good to say that while the job sounds interesting, it's not worth it if I have to interview like that.  Just told two pretty prominent unicorns that I wasn't interesting in the interview process after their recruiters/hiring managers found jobs that I was pretty perfect for.

Funny thing is, I think they hear that a lot from other experienced folks.  There is no surprise on their part and they fully understood.

I'm gainfully employed in a good job with decent pay.  I'm too old and bitter for interview games right now.

EDIT:

I didn't realize that this would gain this much traction.  So, some clarifying points to deal with the questions/assumptions.

My current TC is around $330K - but my refreshers are really good - so it will soon be $370K and $410K the year after.   The company has the ideal culture, great WLB, and I have an absolutely awesome manager.  It's good, but I keep an ear open because I know I can do slightly better.  I have 20 years of experience, 13-15 years as dev (depends on what you call my startup experience), but I have no specialized skills - so no, I won't make $700K that some people are saying that is possible.  Possible for some, not me.  $500K-$550K is my max potential, which is still unbelievably awesome.

The companies I said no to were willing to get up to $500K, but these are non-public companies.  So, there's a risk that lowers the TC in my opinion to something not worth much more than my current job, and my WLB would be much worse.  And I'm not going to cram for LeetCode for a week to work for them.  Too much stress for too much randomness in the interview process.

And no, I don't have a blanket refusal on all LeetCode. I'm not stupid.  But if a company wants me to do LeetCode, I do expect a huge premium.  Most companies don't offer that premium, so I gleefully refuse.

An example of where I didn't refuse - I recently interviewed for the E6 track at Facebook, but failed (long story short, they asked for a 3rd round, got a bad System Design interviewer, and failed - I actually did well on the LeetCode surprisingly).  Anyway, that job would have $500K+ of non-paper money.  So, I will do LeetCode for that.  I also talked with Google.  Did the first round, and they only wanted me at an L5, which is not a huge raise.  That is not worth it to continue, so I refused.",2020-09-03 21:02:23
fkt8ma,"For interns who just got cancelled: “It is possible to commit no mistakes and still lose. That is not a weakness, that is life.”",I know a lot of us have had our internships cancelled or are afraid of it happening. u/jpludens mentioned this quote in another thread and I felt like y’all should hear it. Getting cancelled is not your fault,2020-03-18 17:20:22
hsba3c,"""Entry Level"" labeled jobs on LinkedIn are requiring 5+ years of experience in listing. What does Entry level even mean anymore?","I guess 8 years of experience is considered entry level now folks. 


I just wanted to rant during this depressing time of job searching as a recent college grad.",2020-07-16 15:08:04
j4t0j6,Nobody talks about how hard leaving a job is,"I recently left my first job out of college after being there for two years, and it was truly one of the most difficult things I’ve ever had to do. When you spend 8 hours a day with your coworkers, you form strong bonds. These people became like my family. I left the job because I wasn’t getting the career growth that I wanted, but I adored my coworkers. I’m not really sure what the point of this post is, but I wish people talked about this aspect of job hopping more. I only ever see people talking about interviews/job hopping to increase TC, but nobody talks about this aspect of it. Maybe my relationships with my coworkers just meant more to me than than it does to other people on this sub, but curious to hear what other people think about this.",2020-10-04 04:24:36
h17blk,Always write a clear README if you want to find a coding job,"In this article, I would like to share with you my little observations on how many developers failed to convince me to hire them by not putting a README to their repositories.

### What is README?

Usually, README is a file in the repository of software/project that briefly explains it. 

**README file is there to pitch your work.**

README is not your documentation (unless it can be fitted into one page).

&#x200B;

### Why should you make it? 

If you make your repository public, you most likely will be judged by it. Especially, when you apply for a new job with your GitHub/GitLab account in your resume. 

I have been involved in hiring interns/junior software engineering positions a few times throughout my career. On average, I saw only 1 out of 7 candidates to mention their profiles on GitHub/GitLab. **Very few of those candidates would have a README attached to their repositories.** 

I assume that those people attaching their GitHub profiles think that recruiters/recruiting engineers will dig into the code to figure out what is going on over there. **That does not happen.** The main reasons for that are:

1. They do not have time for that
2. They are not technical
3. Even if they are technical, they might not know the language/structure of the code that you have written

>As a result, you might have strong coding skills and a decent project in your portfolio, but no one will know that without a README that would explain what happens.

#### Drawbacks of not having a clear README

As a technical person, when I see no-README repositories of people applying for a job I question their soft skills’ level. At least, I will think that **you are OK to leave your work undocumented**. Obviously, it does not help you to pass to the next processing level.

#### Drawbacks of having a poor README

You tried to explain what it is all about in your README, but it is hard to understand (to me). I would count you a point if you apply for a junior-level position, but it would be a problem if you want to be a senior. 

Soft skills are critical for senior-level engineers. Communicate the task, and explain your work might be even more important than your coding skills. 

Senior-level engineers have to be able to clearly explain what they have built.

#### Advantages of having a good README (for your resume)

1. You look professional
2. Anyone in the hiring loop can evaluate your efforts
3. You are able to clearly explain what you built

&#x200B;

### How to make a good README?

0. Make a short self-explanatory repository name

Yes, I want to be able to guess what is inside just by a name. 

Usually, it is not possible to explain all you did in just your repository name. Instead, you should pick only one feature, and try to use it as a repository name.

1. Concise one-liner

**One-liners are hard.** In the startup world, one-liners are the beginning of your pitch. So,  it has to attract the listener’s attention. 

Same thing with your README. Try to impress your reader with 60 characters. 

Your task here is to make me think something like:

>“Interesting, how did she do that? I want to investigate her repository further”

2. Demo it

Show me what it does.

4.  Explain which purpose it serves

Oh yes. We do not code just to code. We code to resolve the problems. We code to bring value to our companies. So, even if you did it just because you liked it. **I want you to explain the value it brings to a specific type of person/company.** 

5. Promote it

Now, when you have a clear README, try to get someone’s attention. Get some feedback. Get some stars. 

Other things that are good to have in your README:

1. How to install
2. Quick Start
3. Mention libraries which you used to produce your work
4. LICENSE

### 

### Conclusion

Searching for your first coding job with repositories that have a well-crafted README will make you a top 1% at the screening stage. 

The bitter truth here is that you have to do a lot of non-coding work to make someone check your code. And that is how it usually works. ",2020-06-11 20:29:33
jpe1q1,RIP,"~120 applications...
~17 first round HR/Leets...
~6 final round interviews... 

Just received a phone call from one of my top choices... 5min of the recruiter telling me how great my scores were and how much everyone enjoyed talking with me (combined 13hrs of Zoom personality/white board style interviews for this one position)... after fluffing me up, he unfortunately says, “I am sorry, but we can not rationalize giving you the position over an applicant with a PhD.  In normal times we would have offered you the position in a heart beat.  But we are finding the applicant pools are becoming stronger than we have ever seen.” 

Can I get a RIP in the chat friends? 

PS... I still have 4 more of the final round interviews to complete, so I am still extremely grateful for the opportunities to atleast interview.  But I am feeling extremely defeated after putting nearly ~40hrs into that single companies application process.

EDIT:  Thanks for all the support friends!  I really just needed to let it out.  Thank you for refreshing my spirits!",2020-11-06 21:38:23
ixflgu,This is it; I've finally used BFS at work,I'm proud to say I've finally used BFS at work. All that leetcode prep has finally prepared me for this moment to write 30 lines of code. Now let's see how many more years it'll take me before I use DP at work,2020-09-22 03:17:56
kbrhxz,"I made a database of software remote jobs across Loom, Zapier, Binance & 2750+ remote companies, totally free. Will continue to add new jobs as I discover more.","All jobs are free listings, none are payed to promote.

Link: https://remotists.com/subs/software-engineering-remote-jobs/

I have been working on this since august as i was laid off due to covid. Still continuing to do it with some friends. 

I am thinking of adding a sort feature moving ahead. Apart from that, If there is any more feedback, do share. :)

Thanks.",2020-12-12 16:03:47
kaiyoa,"Is it just me, or is Glassdoor becoming less and less useful?","I have known Glassdoor to be a little suspect in terms of its usefulness, but this year it seems to have gone off the deep end. This year my company laid off a large portion of its staff and subsequent reviews showed up on Glassdoor giving them (justified) 1 star reviews for the way they handled the situation. As of this writing ALL of them are gone, like magic.

Last week I attempted to write an interview review for a company that I spoke to, and a major problem was that they wanted me in the office while COVID is raging in my state. When I submitted the review it wasn't allowed to go through because it didn't meet the guidelines. To my surprise, it was because I had the word ""covid"" in the review body which is a very important discussion to have right now, but Glassdoor won't allow it.

With layoffs and employee health being massive issues in 2020, it seems that Glassdoor is siding with employers rather than providing candidates with useful information. Are you experiencing the same thing with how useful Glassdoor is?",2020-12-10 16:55:03
i03i39,[Motivational Success Story] How I got a $170k job as an Asian male with 2.3 GPA from a public university,"**Intro:**

Hey everyone,

I've been seeing a lot of negative posts on here recently, and it kinda sucks since a lot of how I moved up has been partially due to the resources and inspiring stories I've seen on here. Like most of you, I have also been laid off early on as a direct result of covid-19 hiring freeze/workforce cut, but then I ended up with a very good role at a Big N company. With that said, I want to give back to this community and hopefully inspire/help some of you who are struggling to find jobs in this rough time by sharing a story of how I ""made"" it.

**Background:**

A brief background of myself is that I am a 23 year old asian male who graduated from a public university (it is quite reputable though) with a \~2.3 GPA in CS. I also graduated a semester late due to failing one of my final upper-level class on my final year, which definitely hurt my job-hunting prospect a bit since it was difficult to explain this to my potential employers. Given my stats, it seemed like I had little to no chance of landing a role, let alone a role at a Big N company, and yet, here I am. With that said, here is my story and how I did it.

**First Job-Hunt:**

Unsurprisingly, job-hunting as a senior was quite difficult due to my low GPA compared to my peers. I also lacked the knowledge/skill-set/experience that a lot of companies were expecting new-grads to gain since I only had one relevant internship at a non-tech company. The first job I took was a contractor position where I was paid $25/hr, which was fairly comfortable given my cost of living. It was the only offer I received out of the countless applications I sent out during my senior year, and even that job was very hard for me to obtain. After doing well on the on-site interview, I was asked for my transcript and to complete a take-home coding assignment, I was almost ghosted due to my GPA, and I had to keep emailing the director in regards to the position. After many weeks of exchanging emails, he finally agreed to hire me as a temporary worker after seeing my take-home coding assignment (yes, those are actually worth doing if you really need the job).

**Second Job-Hunt:**

As my contract was nearing the end, I went back on the job-hunt again. I had a conversation with my manager and he thought I did well enough to convert to full-time. However, when covid started happening, I knew I was at risk of being let go, and sure enough, it happened the day before my interview with my current company (not within my manager's control). Despite the bad timing, I didn't let it get to my head and performed well on the interview. This was also my only offer out of the hundreds of applications I sent out, and it's better than anything I thought I'd ever get, given my background. I didn't even bother negotiating as I was very happy with the 300% salary increase and it was already a very generous offer compared to the others at my level at the same company.

**Steps I took:**

First and foremost, I reviewed my data structures and algorithm. I went through a study guide that has since then been taken down (unfortunately), but the second best guide would be the Crack the Coding Interview. I read this mostly for the lessons it provided on each topics.

Edit:  [https://workflowy.com/s/study-guide/RD5kZ682pWX5oxiE](https://workflowy.com/s/study-guide/RD5kZ682pWX5oxiE) is the link to the study guide, shoutout to u/throwinaway101010 for finding it!

Once I was brushed up on my DS+A, I started networking. I reached out to a lot of my friends, family friends, family friend coworkers, strangers on discord (shout out to CS Career Hackers) and recruiters. I asked them questions like what they look for in candidates, what do I need to improve on and if they can refer me. I used those feedback to improve myself to the point where I'm at right now. In fact, my current role came from a referral from a stranger on discord, so definitely try to leverage as much networking as you can, even if there's a slim chance of it working out!

Another important thing was to keep improving my resume. I listed my skills, work experience/accomplishments, education (no GPA lol), 2 side projects (one was a hackathon app and another was a game I created with my friends). I also asked many friends and strangers to review my resume and built up on the feedback they provided, and it eventually paid off as I got to the stage where more recruiters were giving me callbacks.

Finally, I did a lot of mock interviews. I tried to schedule about 2-3 mock interviews a week, and slowly ramped up as my final interview was coming up. This only took about 1-2 hours a day, which wasn't much for me since it just meant 2-3 less games of league. Again, I mocked with as many of my relevant connections as I knew, as well as the people on discord. I built up on the feedback I received to improve my interviewing skills. I became better at communicating my thought process, handling edge cases, coming up with near-optimal solutions to problems I haven't seen before and asking clarifying questions. I am very grateful for their time as I felt this was my biggest contributing factor to how I did well for the interview. By the time I reached my on-site interview, it just felt like another mock interview at that point. I also reviewed the company values and came up with 5-6 stories prepared that demonstrated those values in a clear, concise manner. I highly recommend people do more mock interviews instead of just solo leetcode, as it'll give you exposure to how other people answer questions and what you're lacking in.

**Conclusion:**

Please don't be discouraged when applying for jobs. I know how it felt, I was literally in that spot a couple months ago, but I never gave up. I kept improving myself and I achieved what I didn't think was possible for me in the past. There are companies that are still hiring new talents, you just have to keep looking.

Also, don't get obsessed over the Big N hype either (don't think that any job that isn't Big N is worthless). I wasn't primarily targeting Big N, but when I saw someone recruiting for it on discord, I just went for it. I was very much comfortable at my old job and content with the amount I was making, but the circumstance forced me to job hop, unfortunately.

Keep moving forward, and don't get too let down by rejections, I've faced many rejections from companies I got call-backs from and I just brush if off and keep applying/trying.

Also, keep in mind that this is a marathon, not a sprint. As long as you consistently improve, you will eventually be where you want to be in due time, whether it's a position at a new company or a promotion at your current one.

In conclusion, if I, an Asian male with a 2.3 GPA at a public university, can land a job at a Big N company through perseverance , then I'm sure all of you can find something you'll be happy with by not giving up.

Thank you for reading,

Roy

**Note:**

The main reason behind my low GPA is mostly due to my inability to do well on exams, but I firmly believe that exam-taking holds no weight on how good of an employee the student will be. I did well on projects and assignments that were more relevant to real world work experience. However, that's a discussion for another time, lol.",2020-07-29 16:21:14
epdkbd,I have decided to give up and just be happy with what I have in life.,"I work as a Software Engineer at a scaling start up in San Francisco.

I'm single (unmarried) and living in the East Bay making $100k base, $125 total comp. 

I know it isn't much (many here will say it's peanuts), but I get to work remote a day or two a week. There are perks like free food, we get to travel on occasion, and I like my coworkers. I also like the work and tech stack, and I learn more at my own pace.

I've been studying and leetcoding for over a year trying to get into any bigger, best/well known company. Any of them.

I've gotten interviews, but it's never enough. I know how to code, but I fail their challenges.

So I've recently decided to give up and just be happy with where I am. I'm coming up on a year at my current job in a couple of months and may get a raise. 

I'm just tired of the anxiety and the rat race. I'm tired of leetcode. I'm tired of the gamble I take with my self esteem every time I take a chance with these companies.

I do okay for myself and I have a simple life. I don't spend much, so I don't need much. My happiness is worth more than this never ending stress... Where does it end?

Does anyone else feel like they are getting interviews just to fill the interviewers time? I honestly feel like most of these people know if they want to hire you before you even go in.

Anyway, that's my rant. I just want to know if anyone else feels this way. Thanks.",2020-01-16 03:30:23
jfg4q3,Well it has happened for me!,"Job apps: 650

1st interviews: 12

2nd interviews: 3

Job offer: 1

Don't give up everyone! I graduated in May 2020 BSCS with no internship experience...and I finally got full time employment that I'm starting tomorrow :)

It is IT support... but I am gonna be working with SQL so I'll be getting back end experience! I'm happy with it.

My advice is if you're like me... and you graduated during one of the worst years ever AND you don't have any professional experience be okay with broadening your job search a bit. For most of the time I was trying to be picky with the job title/description which is probably why I sent out my first 400 apps without getting any responses... every interview I've gotten has been in the past month.

With the job market right now... getting a job that isn't necessarily the pay or work that you want is better than a big gap of unemployment... you can re evaluate later once you get some experience and the job market isn't the way it is now. 

I've been lurking here for my entire search and I know there a lot of you out there. Thank you for the support and the info during this time.",2020-10-21 16:25:02
f4qda7,This sub is scaring me,"I started working in that industry last year and I've never done anything that gets mentioned here on a daily basis. I never opened Leetcode in my browser, never went to a meetup and I only code at work. And you know what? I'm super happy with that because I have a normal life outside of work and I can pursue great hobbys where coding is not a part of. Should I be worried about my future. I don't see the point in grinding programming problems for several hours or  excluding everything out of my life except CS. 
How do you guys handle the pressure that you get here?",2020-02-16 13:02:17
i3n1cy,"Name and Shame: Epic Systems, for Unnecessarily Increasing Risk of COVID Transmission","Just as an FYI to anybody looking into working here:

The healthcare organization Epic Systems is pushing over 2,000 software developers to be back on campus by August 24th, and will have all of it's **10,000** employees on campus by **September 21st**, even though many of our employees have successfully been working remotely for the past 3 or 4 months. Anybody at increased risk for COVID will have to be back by November 2nd.

They did a recent [interview](https://www.youtube.com/watch?v=EwQCVIXmJok) with CBS on this recently, although I have no idea why they agreed to this.

Honestly, before this COVID response I really enjoyed my time at Epic. The tech stack was a bit outdated, sure, but I was given lots of responsibility and was given lots of chances to grow. Unfortunately, the company's push to have its employees work on campus *(for the sake of ""culture"" according to our CEO)*, combined with the fact that this increases the risk of a COVID outbreak in Madison, has made me lose a lot of respect for our company as a healthcare organization.",2020-08-04 16:57:51
j9zfgd,Positioning yourself to take advantage of good fortune is a required skill to advance your career,"I was recently promoted to Director of Engineering and, after taking some time to reflect this weekend, I realized that it looked like my career trajectory was basically entirely luck. I called and messaged an odd dozen of my friends in the industry and, oddly enough, it seems to be that way for a lot of people. I realized there had to be more to it.

Here’s a bullet list of my career history:

• June 2011 - In grad school (for stats), I got a job as a Systems Analyst at $22/hr. At first this was just doing analytics in R, but I learned SQL. The DBA in that department left and I took on a few of his projects, optimizing stored procedures and fixing issues here-and-there in the database. 

• December 2013 - I was laid off. I had now graduated, so I had no insurance. It soon became apparent that rent and student loans were gonna burn through whatever savings I had pretty quickly. In February, I took the hit to my ego, moved back to my hometown (which was a lot cheaper CoL), got certified as an MCSA in SQL Server, and started going to local database meetups, looking for jobs.

• March 2014 - I got an interview for a job from one of the people I met at the meetup I was attending. I got it, making 55k as a DBA, partially off the back of my prior experience and the certification, but mostly by asking good questions and selling myself. This was a pretty laid back job, SLAs were not very tight so I got to spend time learning by trying to make our backend systems more efficient and resilient. I started reading about DevOps and quickly became enamored by the concepts. I built automated deployment pipelines for our database schema changes. I started writing tooling and automation around our compliance requirements. I got experience with AWS when we migrated our relatively simple setup there. I spent 5 years at this job, getting cost of living raises every year while desperately trying to pay off student loans. They could afford to pay me more, but they didn’t, so I eventually got fed up and left.

• April 2019 – One of the people I met networking in the local DevOps meetups had an opening for an SRE at his company, and asked me to apply. I interviewed there, and it seemed like a great group. The company was a startup division of much larger firm. The interviews were laid back, we just talked shop for an hour. They asked me how much I was making and I said “It wouldn’t make sense for me to move for less than 115k”. This was, of course, complete horseshit, but not technically a lie. I defined what “made sense for me” after all. They offered me 115k + bonus, and I took it.

• September 2020 – By now, I realized that, while I loved the team I worked with, this job was basically the logical opposite of my last job. It was fast-paced, frenetic, and we had to work hard and be really creative in order to hit milestones. I was learning a ton, and had been promoted, but I had started to feel the beginnings of burnout. In addition to my job, I had been leading brown-bags to teach people how to use the self-service platforms we were building, and consulting internally on other projects. My boss quit suddenly, and I was asked to take his position in the interim. I did, and after taking a crash course on corporate accounting and doing two jobs for a month from hell, I was asked to take the position permanently. I’m now doing a lot better, things have started to stabilize and we’re working on several projects to improve our workflow, which are a lot of fun.

This cannot be overstated: soft skills are key! While continuous learning is required for any career advancement, it wont help you get lucky. Soft skills enable you to put yourself in a position to take advantage of opportunities you would not be able to otherwise. I got my SRE position easily because the company was in a really tough spot and needed the expertise then and there, and I had gotten to know someone working there who fought for me. I got a promotion off the back of an unexpected departure because the company needed someone now, and I had developed relationship with upper management by offering to volunteer to do internal consulting and knowledge sharing for other product groups. I had realized that the reason I did not get a significant raise or promotion at my second job was because a lot of my work was not visible, just tinkering in the database layer and automating the boring parts of my job, and I wasn’t going to make that same mistake again.

I learned to speak clearly with confidence by pacing around my room at home and practicing presentations, doing mock conversations, even practicing joke delivery. It might sound odd, but none of this comes naturally to me, so I had to learn somehow.

This had the knock-on effect of giving me some real confidence, when I realized that people were actually listening to me. I pushed to make as much of my work visible to upper management as possible, and where that wasn’t possible, I started going out of my way to do stuff that was more public; teaching, mentoring, organizing internal knowledge-sharing communities, etc. Helping other people is genuinely one of the best things you can do for yourself.

You never know when an opportunity will come your way. If you care about advancing your career, you should be prepared to seize it. Network, practice your soft skills, and deliver as much visible value as you can.

EDIT: upvoting all the r/humblebrag comments since they make me giggle. This sub helped me out a few years ago when I was bored and frustrated at my last job. I’m just paying it forward.",2020-10-12 20:58:38
ju6qgt,"Learnings from a ""successful"" cs career","I wanted to counter some of the selection bias on this sub by telling a bit about what I consider to be a successful cs career.

A little about me

* Went to an OK school (uva undergrad), got OK grades (2.95)
* Never ground leetcode
* Applied to only a few jobs after school, nothing crazy.
* Entry salary was 50k as a new grad at a no-name government contractor

Outcomes several years later:

* 300k total comp
* 250k in the bank / investments
* 100% remote position (even before covid)
* Own a home in Santa Cruz county.
* Early employee at a tech startup which was acquired recently

The prevailing view on this sub seems to be that in order to have a successful career you need to:

* graduate from a top tier school with a high gpa
* get into a big-n, unicorn, or fintech company with 100k base salary directly out of school
* Grind leetcode all day until you can do hards without thinking

I'd like to provide my career as a counter-example, which doesn't seem too rare among most software engineers that I know.

My learnings:

* Start small and work up. Software companies want experience first, not necessarily good grades or algorithms chops. Since it's your work history that stands out, work on that first. Sure, apply to google, but also apply to that non-tech shop that needs software engineering. Stick around long enough to learn something before moving on. When you are done or if your wage is stagnating, apply somewhere else.
* Lose the ego and be friendly. Learn to work well with other people. My best references now are people I've worked with amicably.
* Improve yourself over time. If you aren't learning what you want to on the job, learn about stuff out of the job. Always be learning. If you aren't learning at work, go to tech meetups, use online courses, and hack for fun. If you can, go back to school. Pick up a Masters degree and specialize in something you are _interested_ in.
* At some point, work at a small startup, and really invest your time and energy. You will have significant equity, which means you will have a chance for a large payout if the company is acquired, and the harder you work the more value you are creating. Do your diligence to find the right company for you: good, savvy leadership, in a promising field. This is a gamble of course, but even if the company goes under, it's an incredible learning experience.
* demonstrate your value, and draw on that to ask for what you want. Get involved in projects, and be do your best to be integral to their success. Another way to demonstrate value is to apply elsewhere and get offers. Remember once you have some experience, you will be in much higher demand. If you can demonstrate value, you can ask for things you want for your career, e.g. cooler projects, better pay, better title, better benefits, remote work.

This has been my experience. Hopefully it gives some hope to other people who may feel like their grades or resume isn't stellar. Tldr: get any job programming, do awesome at it, get better yourself, jump to better jobs every so often, and build your resume.

Edit: a lot of people are asking about timeline. I graduated in 2006. I realize this may change the tone of my post for some, as the tech job market has changed somewhat since then. I hope that the pointers are helpful anyway!

Edit: formatting",2020-11-14 18:34:41
jo49l2,I just got my first offer,"I’m honestly shocked

I didn’t think I’d get here... I know no one in the company, it’s far away (Austin TX, I’m in very rural NC), and I’m an average student without anything like research or anything on my resume. I just have a couple small projects up on my GitHub. 

I got an offer with General Motors, and while the pay seems low-ish at first, the benefits, relocation, advancement, and frequent raises seem to make it look worthwhile. 

I just wanted to share this for other December graduates who feel average and afraid about the future. There’s still stuff out there, best of luck

Edit: sorry to ghost! I’m trying to cook and reply to a lot of DMs but I will come around and interact in the comments as soon as I can",2020-11-04 20:27:17
i2wp8y,How to get out of the 9 to 5 rat race in CS? Have worked at top companies and still miserable,"TL;DR:

\- Absolutely hate the soul sucking experience that is the 9 to 5 / 40 hour work week. Spending my prime years making someone else rich, so I can retire and ""enjoy"" my free time when I'm old and frail? No thanks

\- Have worked at different top companies but still hated it, even if the work was interesting

\- Can do FIRE, but even then I'd be retiring at 40 - 45, basically near the end of my prime years of life. 

Is there a way out of this grind? I always thought software engineering was the coolest shit when I was younger, now that I've been in the industry for a few years I see that everyone is miserable. Life is too short for this shit boys.",2020-08-03 13:07:00
i8gkbg,"If an employer doesn't have a remote policy ""after"" COVID, I won't work for them","I have been doing some job searching and interviews off and over the past months and I am seeing a theme in my area: employers want you in the office 5 days a week after COVID is over. 

I just talked to a company whose entire office is working from home right now and their profits went up 11% last month. When I asked what their remote policy would be if/when COVID calms down they said you would have to be in the office five days a week.

To that I say, fuck that. No one knows what the state of the US will be with disease and social unrest at that point. If you can get all the work done and actually have an increase in profit what's the point of having archaic remote policies? Why not have it flexible for those who want to be in office part time? Not to mention companies save money with having remote employees, there is less traffic and pollution, and there is less demand on America's aging infrastructure.

I'm at the point where if there is no remote policy for companies that are already remote then they are not worth my time. It shows there is no regard for employees right from the start.

Am I being unreasonable here?",2020-08-12 16:11:37
j22ycm,I got a job!!,"It still does not feel real to be typing this, especially given that I have not finished school and amidst a pandemic, but I got my first FT SWE job! I was very fortunate to have interned at this same place and made a lot of connections that helped make this happen. As a result, I can directly attest to the fact that it really is WHO you know sometimes. People always told me this and I knew it to be true, but this is the first time I have gotten a GOOD job because of it. The recruiter did all the work for me - meeting with managers, discussing logistics, and even got me the TOP of the salary range. I did not even have to interview again or do any leetcode. But by far, I think the most freeing thing is not having to hustle anymore for an internship for next summer. Feels good man.",2020-09-29 16:43:22
g9zcdu,Looking to start a personal project? Here's some data from my 150+ applications this spring,"Like many of you, graduating soon and all of my interview processes have been cancelled and/or frozen for the time being. So, back to scouring through LinkedIn for new grad or junior software engineering positions. I decided to collect some data as I went through the applications to help me formulate my next personal project.

**Here's what I found (in order of most wanted by hiring companies):**

**Most commonly asked** for is knowing at least **ONE** of **Java, JavaScript, Python, C/C++, or C#**. I compared the amount of times these languages were mentioned among each other.

* **JavaScript** **(31.89%)**
   * Plain JS (32.2%)
   * React (32.2%)
   * Node (18.64%)
   * Angular (15.25%)
   * Vue (1.69%)
* **Java** **(23.78%)**
   * Plain Java (84.1%)
   * Spring (9.1%)
   * Kotlin (6.82%)
* **Python (22.16%)**
* **C/C++ (16.76%)**
* **C# (5.41%)**

**Second most commonly** asked for is knowledge of **queries and databases**. Here's how they compare against each other:

* **SQL (81.08%)**
   * Not specified (66.67%)
   * MySQL (16.67%)
   * PostgreSQL (10%)
   * SQL Server (6.67%)
* **NoSQL (10.81%)**
   * Not specified (50%)
   * MongoDB (50%)
* **GraphQL (6.82%)**

**Third most commonly** asked for is knowledge of **cloud computing and technologies**:

* **AWS** (53.57%)
* **Azure** (21.43%)
* **Not specified** (14.29%)
* **GCP** (10.71%)

**Fourth most commonly** asked is knowledge of **other languages and frameworks** outside of the most common languages listed above. Here is how they compared among each other:

* Golang (32.65%)
* Ruby (22.45%)
* .Net (12.24%)
* Scala (8.16%)
* Spark (8.16%)
* Perl (4.08%)
* R (4.08%)
* Hadoop (4.08%)
* PHP (4.08%)

**Fifth most commonly** asked for is knowledge of **containerization:**

* No surprise here, only technologies mentioned are **Docker** and **Kubernetes.**

**Sixth most commonly** asked for is kind of weird to me because I didn't think it much mattered, but these were specifically mentioned in many applications. That being of using a specific **operating system**:

* Linux/Unix (56.25%)
* Windows (43.75%)
   * Typically specified for companies using Azure, SQL Server or .NET/C#

**Seventh most commonly** asked for is knowledge of **Testing, Automation or Build Tools:**

* Maven (25%)
* Jenkins (25%)
* Junit (25%)
* Travis CI (12.5%)
* Jest (12.5%)

**8th:** Knowledge of **Agile/Scrum**

**9th:** Knowledge of **Microservices**

**10th:** Knowledge of **JSON/XML**

&#x200B;

**Notes:**

* Remember, these are ordered by the amount of times these technologies are specifically mentioned by 185+ companies in their job applications. Not trying to say any of these tools or technologies are any better than each other, just the data I found while applying.
* Compared to my internship/job searches last year, the things most emerging are more specific mentions of **Golang, Cloud Services, and Containerization**
* While I just kept track of specific technologies, many applications just ask for general knowledge of object oriented programming, algorithms/data structures, testing and the software development process without mentioning specific languages, tools or frameworks.

Hope this helps some of you in planning some technologies to leverage while planning your personal projects! I'm putting together some diagrams and mock-ups at the moment and plan on incorporating as much as I can.",2020-04-29 00:34:47
jsbmyq,"Had a one way video !nterview with a company. Recruiter told me they ""didn't like my look"". I'm a minority.","I'm a senior developer who lives out on the west coast. I've currently employed but I have been looking for work because my company's financials aren't doing so well. A few weeks ago a recruiter reached out to me about a remote job and it looked like it was a good opportunity. It was for a family run company that was located in rural Ohio who was just recently getting into the idea of remote workers.

Recruiter was very open and honest and said this was an ""old school"" company. I thought I knew what that meant, but man there was a whole other side to that statement. So I had a few screening interviews with the recruiter and she told me that they wanted me to do a 1 way video !nterview (I have to format that word that way or else this post will be auto filtered out). 

For those of you that are unfamiliar, these are one of those shitty ""audition"" type !nterviews where you get asked questions and record your answer to the camera. There is no other person on the other side, so you don't get to learn anything about the company culture or anything. I was told to dress up for it despite it being in my own house, which again was weird as hell. So I shaved, put on a nice shirt, and did this thing in my own home.

Recruiter got back to me the next week and said they weren't going forward. She said the feedback was ""they didn't like your look or poise"". Not my technical skills or my experience.... my look. I should point out that I'm latino, and I have a latino name. This fucking INFURIATED me but I hid it from the recruiter. I looked up the town's demographics and it's 99% white and the county went 80% for a certain presidential candidate. I didn't even think about any of this until I got the news that I was denied because of my ""look and poise"".

I know this topic can be uncomfortable, but it's something I felt I should share. I'm shocked that this kind of thing is still going on. I'm not going to name and shame them in case I decide to escalate this, but I had to share. Have you ever experienced anything like this? Is this kind of an unspoken thing that people still experience in the Midwest or elsewhere? I would never expected this coming from the West Coast.",2020-11-11 16:49:08
klyxns,New Grads: don't worry too much about the perfect first job,"I am an ex-big 4 worker, and I must say, that place was hell. As a new grad coming from a mediocre school and only a couple small internships, getting a job at \[biggest cloud company in the world\] was a dream! I worked extremely hard preparing for interviews my whole senior year and I thought I was going to be set for the rest of my life.

Luckily, when I got to Seattle, I came to an org that was in the middle of being disassembled from the top to the bottom. I had an extremely incompetent manager who was just looking out for himself, a team of engineers who preferred to speak in Mandarin over English, and not a single piece of documentation for our code base.

The cherry on top was my first conversation with my manager was ""we can hire SDE1's at anytime, so you are not that useful until you can get to SDE2"".

After not having a single day of vacation for over a year (yes I worked on Christmas thanks to the company's oncall 24/7 policy!), half my team moving to other companies, and a manager change, I was put on the bottom of my team's ranking list because I had the least amount of experience. At the end of the day, you are worth as much as the years on your resume, how else is a manager that doesn't know you suppose to rank you amongst everyone else at a company that requires rankings? It was devastating to me that after working so hard work (at an estimated average of 50 to 60 hours a week), that it didn't matter.

This was all almost a year ago now, but I have been at my new company and, even though the work is not as difficult, I am not having constant panic attacks to get stressful, mismanaged work done.

This work force will chew you up, and I see a lot of new grad peers constantly stressing out about getting that perfect job. The only thing that matters is working somewhere that is not bad for your health. Literally just being in this industry for multiple years will get you more than enough money, you don't need to be a ""rockstar"", that is all just marketing/recruiter BS.",2020-12-28 21:02:03
f5ttn6,Why does this field have so much ego?,"Seriously. I mean its filled with people who have such inflated egos that you cant even ask a simple question. Barely anyone in this field is humble and the people are textbook know it alls who are the type to say “You seriously don’t know that? Thats so easy!” and make fun of you when you miss a question or dont know something. Idk about you guys, but the more I learn the dumber I feel so I try not to present myself as a know it all misunderstood genius",2020-02-18 15:54:37
ejkd01,Name and Shame: Home Depot,"This was for data analytics/business analytics in the corporate office. Was contacted by a recruiter after applying that they wanted a phone interview. Had the interview (purely behavioral) and it went great. They told me they wanted to fly me to Atlanta. Awesome! 

In the coming days they set up a flight hotel room etc. Everything went great. Had two interviews (both 45 minutes) with two people. First went pretty well (7/10) second one went really well (9/10). I was told they would get back to me within a few weeks. 

A few days later I receive an email from the head recruiter saying that my recruiter will send feedback next week. Great- this is it. I then open my email one morning- for her to tell me to wait a few more weeks. Great. 

At this point I have a final round interview with a telecom company. I let Home Depot know and they told me to notify them if I get an offer. They ended up giving me an offer and I let Home Depot know. My recruiter said we would be in contact soon. 

7 days later and I still haven’t heard from them and I told my recruiter I might have to sign my current offer. She said she wanted to call me. We talked and she recommended I sign my current offer and if I get Home Depot to renege. I was admittedly surprised she said this. I never want to renege on an offer and at this points it’s been quite a while.  (2+ weeks) 

About 10 days later I was contacted and she wanted to speak with me- finally. She then calls me to tell me to wait until Mid January. Keep in mind this was mid December when she told me this. I was floored. But I decided to wait. 

Finally, I emailed my recruiter yesterday. She wanted to call me. She called me today to tell me that I did great in the interview and the hiring managers liked me but a returning intern accepted a returning offer- and thus they couldn’t offer me a position. After almost nearly two months of waiting and being strung along I was declined. 

I’m not upset- I’m actually really excited about my current offer. But I was shocked a Fortune 500 company could be so disorganized. Furthermore, it shouldn’t take nearly two months- for a rejection. 

Just my two cents",2020-01-03 19:30:37
fcgxnw,It's so much less stress when you're not pursuing major companies in big cities with 6 figure salaries.,"I graduated a year ago and I applied to many jobs. I tried really hard to get interviews at the Big N companies. I had dreams of moving to a major city, working for Google or Amazon and thinking about all the pride and glory I could have to say I worked for [insert Big N here]. Eventually I realized I wasn't as good as I thought I was. Those leetcode problems didn't stick with me. Trying to memorize all those algorithms and data structures were stressing me out. I really didn't like programming as much as I thought I did. I realized I was mediocre.

I started applying to jobs at random companies I've never heard of that I would normally ignore. In small cities near that weren't ""tech hubs"". I got a phone interview at a small company nearby that did hardware and had a small 6 person web/IT team. I was dreading the idea of working there. But I went in and met the people and I flipped completely. Everyone was *so nice*. The boss seemed to really care about all their employees. Everyone was a family and I felt immediately welcome. I got along great with everyone and their interview process went smoothly, I felt like I actually connected with real people for the first time.

This was a huge contrast to the awful, stressful, interviews I had at tech companies in bigger cities where everyone felt cold and like they couldn't care less about talking to me. People who drilled me, were snarky, and got visibly annoyed when I didn't know something. I had quite a few ghosts and interviewers who bailed and recruiters who were awful and sent me wrong information. The interviewers seemed to barely glance at my resume. At this company, people I never met were genuinely excited to talk to me about small details about myself.

Also? There was practically no technical parts of the interview. I got casually asked a basic array question that would be CS101 and that was it. The rest was personality and half the interview process was me shooting the shit with people about life, music, hobbies, etc. What a relief!

As far as pay, it's not amazing and it's not 6 figures, but it's livable while also being relatively comfortable in this non-major city. There's no overtime and rarely ever will you get called outside of work. I can easily afford rent, utilities, food, etc. while also having a few hundred to save and few hundred for recreational spending. And that's fine by me. I don't think I'd be any happier with more money. I can work relatively stress-free and enjoy my hobbies outside of work. There's no pool table or free snacks or a Nintendo Switch with Smash Bros in the break room, but who cares. I'm there to work. I can have fun at home.

Honestly I'm relieved. I wish I stopped trying so hard earlier and beating myself down not realizing I just didn't have the aptitude for this stuff. It's not a company anyone has heard of, I can't wear it like a badge of pride, but I'm making rent and I'm happy. I realized I just wanted the pride of working for a company like Google, so I could tell people and they would be impressed, but that's all superficial. It was a vicious cycle of thinking I needed to be great, being unable to achieve what I wanted to achieve, and emotionally feeling like shit afterwards. Genuinely the last year of my life has been the worst I've ever felt mental health wise.

By all means, shoot for the big companies and salaries, but if it's destroying you mentally, I found giving up and enjoying being ""mediocre"" to be the way to go.

Just wanted to share my story after reading this sub for the last ~2 years and feeling like if I didn't make 6 figures in a major city at a company people have heard of, I was worthless. If anything, I feel the most worth at this small company than I did interviewing at bigger, more well known, companies.",2020-03-02 18:57:09
iycxd4,"I have 7 years of professional experience as a software developer. Yesterday, I got rejected from my dream job","I share this for people starting and for letting them know that failure and rejection can also come for ""experienced"" developers.

I have been working remotely for US companies since about 2 years ago, before that all my work was on local (Guatemala) companies. I started looking for relocation jobs at the end of August, because I really wanted to grow my career and also improve my quality of life. My first go to was New Zealand or where ever in Europe, since the visa sponsorship paperwork and so on is way easier than for US o Canada.

Given that I've worked in a little bit of everything in a lot of side projects, I applied to Python (6 years of experience), Data Engineering (2 years of experience) and React jobs (1.5 years of experience). I only received positive replies from 3 companies, one from Netherlands (React), one from NZ (Python) and one from Germany (Python/Django). By far the one that excited me the most was the Django one, since I worked with it for about 4 years and really loved the framework.

That company set a very open 7 steps hiring process, which included everything from code challenges, questions and pair programming. I really liked their openness and culture they seemed to have just by talking with the guys from the hiring process. I prepared as much as I could, given that I haven't worked with Django in the last year and a half at this point. I had 2 hours to complete the code challenge part, but I got a bit too nervous and miss understood the instructions for one question. That held me back and I almost didn't make it to the end with the other. In the end, I only finished 4 out of 5 challenges.

After reviewing, they replied back saying they were not going forward with my applications given my performance on the challenge. The guy who was guiding me through the process was very kind and gave me general feedback about what I could have done better and what other key points I missed. It turned out I miss way more than I thought (around 4 key aspects), so it made sense for they not to choose me.

Still, I am very disappointed on myself and it really, really sucks. I just wanted to share this with the community because failure and growing still comes even after you have been doing this for a while. I will go back to the training grounds and try to get better in order to land that dream job that allows me to relocate.

Best of luck to everyone looking for that job.

Edit: For clarification, I got rejected in the 4th step of the process and it was just one challenge with 5 different questions / tasks. I honestly don't feel like the company had a bad process, given that the things they looked for on the feedback were not there and it wasn't like ""you have to finish 5 out 5 and that's it"".

Then, it wasn't just like ""You didn't make it, better luck next time"". The guy reviewing actually took the time to give deeper feedback with links and references on how to improve. In the end, I am by no means mad at the company, just a bit mad at my self lol.",2020-09-23 16:01:54
kjh4av,What are the most valuable books you're read regarding your career,"Please share with me books you would say have added value to your career.  Anything from self-help/productivity books to nitty gritty software engineering technical books.  Listed below are some books I feel have impacted the way I think about work.

- Deep Work (Cal Newport)
- Digital Minimalism (Cal Newport)
- Zero to One (Peter Thiel)
- Atomic Habits (James Clear)
- The 4-Hour Workweek (Tim Ferriss)",2020-12-24 15:22:21
jl1sjj,Being a team player with a good attitude goes a lot further than being a brilliant jerk.,"I realize there seems to be a trend lately for the past six years where hiring managers tend to look for any sign of weakness as a sign to reject a candidate. 

So what has become more common? Being a know it all jerk with a similar personality to dr house or Sheldon cooper

I’ll take working with a decent engineer who has a good attitude and is pleasant to work with than some genius who is a condescending jerk...even if that genius is as accomplished as Stephen hawking. 

What do you guys think?",2020-10-30 18:01:04
huqkn9,"As a student graduating in a year, this subreddit is one of the most disheartening, depressing things for me to read through","This subreddit seems to be plagued by one of two things at any time. 1) students looking for advice on how to get into the career field (which I have no problem with) and 2) people who have jobs who are consistently unhappy with either their current job or career field, whether it’s a feeling of unworthiness, working long hours basically all weeks of the year, etc. It’s incredibly disheartening and makes me wonder if I chose the right major and career field. 

I have a couple questions that I’m hoping some of you can answer with some brutal honesty as I come to this crossroad in my own life and decide where to go from here. 

1) *Is there anyone out there who DOESNT work long hours and have their life completely taken over by this career field?* I’ve always told myself that I wouldn’t care working 40 hours a week in a job that isn’t all flashing lights and rainbows, but what I’m getting from this subreddit is that these careers often end up being a huge time investment outside of the office as well with constant studying and learning as you try to stay relevant in the field. I simply cannot imagine working 40 hours and then coming home to my future wife and kids only to have to lock myself in my room to study more. 

2) *Does anyone here actually ENJOY their job?* Does anyone actually look forward to going into work? Would anyone use the word fun or fulfilling to describe their job? This isn’t as important to me because like I said I have no problem working 40 hours at work if I can enjoy my life outside of work, but am genuinely curious. 

I’m afraid I won’t like the answers I get but I’m looking for honesty here.",2020-07-20 18:22:56
i7y2rl,Got my first job offer!,"Got my first job offer at a Fortune 500 company today and I couldn’t be more happy! I applied to endless jobs(200+) and got a few interviews but no offer. I basically felt like I was in a loop going nowhere and had my life on hold.

A little about me:
Graduated in May. Although I did not have no previous software internship, I did work at a start-up(5 employees)while I’m school basically working on hardware and manufacturing. It was here that I went out of my way to solve a problem we had and developed a project management tool. This was the project that I can say got me this job. So to those that have no experience, work on project and be sure you can talk about it!",2020-08-11 19:16:33
jbq9dp,I'm a software developer but I'm not a good one. How can I get better?,"I've been working in software development for the past 5 years and I've been at my current company, a large bank, for 2 years. I work on web-based apps used internally by staff. I've had no formal education in computer science so I lack the foundational knowledge others have. I've basically only got by so far by abusing Google and ripping off other, existing code. I feel very inadequate in comparison to my colleagues and that I only got the job because I'm a woman. 

I've tried to learn about data algorithms and design patterns but I struggle to put these into practice. If someone gives me a design task, I haven't got a clue how to get started. We have to move onto AWS soon and I'm dreading that I'm going to cause some massive security or cost issue. We also have to do extra tasks that we propose ourselves in order to improve our processes and keep on top of emerging tech, but I know so little as it is that I don't have anything to contribute.

By the end of the day I'm exhausted and feel like I've accomplished nothing. I've started waking up in the middle of the night thinking about work. It has sapped all motivation from me to the point I can't concentrate properly and I'll procrastinate to avoid tasks I'm stuck on. I'm trying to learn in my spare time but nothing seems to stick. We're buying a house soon, I'm the main earner and I can't afford to lose this job.

Sorry for the rant, I think I just really need a win to get out of this negative mentality I've ended up in. Does anyone know any good techniques for learning the foundations? What's a basic project I can realistically get done in a weekend? How can I learn AWS without getting charged a fortune?

Edit: Thank you to everyone who has replied or sent me a message. I've been having a bad couple of weeks professionally so I feel a lot better knowing I'm not alone and probably not as bad as I think I am. I've compiled a list of all the sources and will check them out. I've also written out a study timetable and I'm going to start going on walks at lunch time to get away from the screen and for some fresh air. Hopefully in a couple month's time I'll be sharing some finished projects with you all!",2020-10-15 15:57:10
kb4ucj,Why do companies expect you to care beyond a pay cheque?,"Not trolling, serious question.  


We have a lot of meetings where company execs like to boast their accomplishments and growth projections. I'm happy for the company but beyond the fact that it's surviving covid, it has little impact on me.",2020-12-11 15:27:48
geqjvr,Anyone else NOT productive at home?,"I see all these posts about how stay at home orders have proven we can all be productive at home, but I can’t relate at all.

* I roll out of bed 5 min before my morning meetings, splash some water and do my hair before my video call. 

* Forget to eat half the time (breakfast at 12pm...). 

* Go to bed super late because I don’t have to drive. 

* And the worst - get distracted by everything around me (electronics, staring out the window, etc).",2020-05-06 19:20:41
hefnfm,My Experience with H1-B as a POC,"I think I have a much different experience with tech then a lot of the posters on here. I am a person of color with a tough start to life, I never went to a great high school, I grew up in a shitty neighborhood, I am in a single parent household, I had a lot of shit not go my way. Luckily I have a good head on my shoulders and a good moral compass.  I was able to go to college after high school. I graduated college with a STEM degree but it was not comp-sci. After graduation I was working doing data entry for minimum wage.  I wanted to make a change and pursued a career as a software developer. I had to teach myself how to code, I busted my ass 3 hours a day after my work and commute and 8 hours on weekends working on personal projects and applying everywhere as a junior developer. I never got any calls back until I put my resume out on Dice. I started getting bombarded by staffing companies mostly owned by Indians. I HAD to take these jobs because nobody would take a chance on me. You know those shitty emails you guys get and go in your spam folder? That shitty 3 month contract in the middle of nowhere? I WORKED that job. That job that list 10 skills and 8 years of experience for 20 bucks an hour? I WORKED that job. I did everything I could to get my foot in the door of software development. 

Because of this the majority of the people I have worked with have been H1-B visa holders. We were all hired by staffing firms to work on projects for huge clients. I worked in giant buildings with 2000 people every single one on this Visa except for me. I became good friends with many of my co workers. For many of them I was their first American friend. I picked up on their culture and they got used to things here. I learned Telugu words and they picked up slang. I showed them Instagram dances and they got me doing Pakka Local. I even have Lungi my friend gifted me after I flew 10 hours and drove another 3 to get to his wedding in India. 

But despite this positive personal experience I wanted to tell you the truth because I always believed that what is right is right and what is wrong is wrong. The majority of the jobs I have worked at over the past 6 years have been clear signs of H1-B abuse. Almost every job I worked at could have been done by an American. Hell it could have been done by a junior developer who just needs a little bit of training. Because of this I began to research the program extensively. 

Its strange that when we bring up H1-B the first thing everybody says is the Cinderella story where a company tries so hard to find a good American candidate, they cant because us Americans all too stupid or lazy and are forced to bring in a foreign worker at a great risk to them. But in my exprience this is simply a nonsensical fallacy. The majority of H1-B visas go to tech staffing companies. These guys are the likes of Cognizant, Wipro, Tata and Infosys. Do you know what city in America has the most H1-B visas granted? Is it Mountain View CA? Is it Seattle? Is it NYC? NOPE Its College Station Texas, the home of Cognizant. The number 2 city is Richardson Texas the home of several other staffing companies. These staffing companies abuse the system terribly. They underpay their workers, they know they have their workers by the neck so they make them work 12 weeks 6 days a week because if the workers quit they get DEPORTED. They pay their workers WAYYY less then what they would pay an American. There is some myth here that an H1-B worker has to make more then their American counterpart. That is simply not true for the majority of the H1-B candidates. There is a loophole in the law that says if all the companies workers are making an average of $60,000 or more or if they all have masters then they are exempt from the salary minimum. Look at all the big tech staffing companies. Average salary at Infosys is 80,000 a year. This is the salary of a contractor who has to pay his own payroll taxes and healthcare. All the big tech staffing companies have average salaries below 90,000. Many American companies do not even bother with the old fad of putting up job postings and pretending Americans are not applying. The staffing firms handle everything for them. They just fire their local devs put up a contract for the same work and just watch one of the staffing firms take on the project for half the price of hiring local.     

Now imagine all these candidates working in some of the most expensive cities in the US for 80,000 a year. You realize how hard life is for them.That is if you are lucky enough to find a job from the big staffing companies! I had friends working at smaller staffing firms that were abused and used. They had to give cash kickbacks to their staffing company. They had to work overtime every day. They had to rent houses with other candidates they had to lease vehicles from companies owned by the staffing agency. They did all of this because they were to scared that if they spoke up they would get fired and deported. 

The H1-B visa is freaking indentured servitude visa. Even the person who originally drafted it Bruce Morrison, the senator who wrote the dam bill is out here campaigning against it. It is not some way for Google or Facebook to take the most talented developers around the world. Maybe that is what it is for 10% of the cases but the majority of its use is for depressing American workers salaries and hiring and abusing foreign developers who are just looking for a better life.  It hurts American workers it hurts the workers it brings in. It is especially hurtful to  people who lack representation at STEM jobs because the majority of us don't have the traditional means it takes to break into this field and are facing discriminatory hiring practices. Look online for how few junior roles there are these days. Nobody is bothering to hire or train juniors because they can get ""experienced"" candidates from abroad. 

Even if you guys believe that every competent developer all over the world deserves to come work here then why not just make them citizens in the first place? Why have this in between limbo visa where people are abused and live in constant fear of deportation? 

I think its time to take a good long look at this program and make something that is fair to everybody.",2020-06-23 14:32:26
fyahcd,Growing within the same company is.....a joke,"I see some people talk about whether they should work long hours or not to keep management happy and get a raise or whatever. I'm here to tell you that you should put yourself first, that keeping management happy is a joke when they are abusive, and that whatever opinion they hold of you will be completely insignificant after you get your next job. You are at your current company to acquire enough experience to be able to get your resume looked at by companies that didn't look at it before. Besides, the promotion you work so hard for? It will be nothing in comparison to hopping into a higher tier company, one where the people aren't so mediocre, where people understand that productivity is maxed when you have good work-life balance. And if they don't understand that, well, at least they'll pay you more! As long as you keep your skills sharp this will be true, which leads me to another point: do your work well because it benefits you, not because it benefits the company.

Save enough money so that you are not afraid of losing your job. Finding your next job becomes so much easier than when you searched for your current one, especially after you go from 0 experience to 6 months...1 year...or more.

Every job you have is a stepping stone into a better job. Make jobs work for you to stay, not the other way around. And make friends with the other developers, they will be your network, they are on the same maze that you are, they are your comrades, unlike your manager.

I'm just some angry ""junior"" developer, but I'm on my way to my third job after being used as a scapegoat by my last manager, even though I gave them a lot of unpaid extra-effort thinking it would be recognized. Next job is 100% remote for a change though.

Thanks for coming to my Ted Talk

---

**Edit**: I am a simple man, if you scratch my back, I scratch yours. This isn't about chasing money, this isn't about being angry forever, this is about having the freedom to demand to be treated with dignity, and that if you step on some toes while you do that, know that you and your career will be fine, actually, you will be better off. And also loyalty doesn't exist, people have to prove to you that they care.",2020-04-10 06:56:20
jtaxx9,Finally got a job!!!,"This day felt like it would never come honestly... 2020 grad but I've been applying since February. I've sent out over 800+ applications and probably had around 40 interviews but I finally landed one!!! It's a remote job based out of Atlanta with a decent comp. It's been a dark year but today really made it all seem like nothing. If you're struggling right just keep pushing through and be patient, your time is coming. 

I graduated from the bay area and the competition was tough. It felt like there was always someone I was competing against that was more qualified than I was with every job I applied to. I only had one internship as a web developer but I talked about that and some of my other best projects. Something that did help me get more responses was I started applying to remote jobs all over the U.S. 

Good luck to everyone out there! There is hope!!",2020-11-13 04:53:30
gf2unw,"I am enjoying WFH. It has significantly boosted my productivity, I have significant amounts of time saved for personal growth and can complete all the house chores without any delays! I hope this becomes the norm in the industry.","I am a full-stack developer(node.js) with 3 years and 10 months of experience. I am amazed at how good WFH has been for me.

I have stuck to a routine during WFH and allocated strict times for everything. But I amazed at how fast most of the work is done. I complete most of my work in about 4 hours max, and then I utilize the remaining time for personal growth.

I am currently studying DS Algos and improving my leetcoding skills. Apart from that, I am learning Java and writing distributed microservices in Java. Since I always wanted to learn an actual strongly typed backend language. I already work with MySQL, so wanted to know what the fuss about PostgreSQL was. Apart from that, I am learning PostgreSQL. Learning about performance tuning with databases.

As far as house chores are considered, I am surprised and how much I can get done by staying at home. No delaying the inevitable boring work. 

Apart from all of this, I also completed 6 novels on my newly bought Kindle!

Overall I feel WFH when executed with discipline has lot of benefits to offer.",2020-05-07 08:43:29
hilm31,Landed my first Web Dev job - fully self-taught. It can be done,"I’ve been waiting a long time to be able to write this post. I’ve seen others achieve this same accomplishment and that was a huge part of my motivation. 

Went from six figure + year job - to just leaving and hoping to find a web dev role. Two big factors currently were corona and I moved to a new city. So the cards were stacked against me but determination and consistency won. 

My self taught course:
Studied elementary OOP and Java about 4 years ago while working full time. Built some small apps here and there and then let it go for a while. Focused real hard on my day job until 1 year ago when I know I had an upcoming move for other reasons. 

I decided to go heavily into web dev and used freecodecamp as my foundation. The site was very useful and gave me a great intro to web dev. I didn’t fully complete each section and all challenges. Tbh I didn’t complete most of the projects. I just made sure I knew the concepts. By the time I got to the data visualization module, I decide to put FCC to the side and build my own react project. 

This is where the magic happened and I encourage all who want to get into development to do the same. Building your first project from complete scratch with no tutorial will teach you more than any camp or course. From downloading you IDE to setting up file structure to running create-react-app on the command line - everything was new to me but I literally Googled everything. Any question I had I just googled it and girded through it. It was slow and painful but you need to get through this learning curve. Just learning standard file structure for a full stack app was never taught anywhere. I found these from reading Stack Overflow, github, FCC forums etc. 

First project took about 2 months - simple text generation app deployed on Heroku and did this all after hours while working 50 hours a week. 

I would like to note also, I was heavily sending commits to github (another thing I had to google / YT to learn) to build up my profile to show employers. 

Once complete it took my project that I was super happy with and started applying to jobs! Turns out, employers won’t hire you based off a text generator app. After 1 month of rejections and about 70 apps I went back to the drawing board and decided to build another app. A messaging application with React. 

Having more knowledge this time around was much easier and I completed a fairly ugly messaging app in about a month using Talk.js. 

Again I took this around and started applying.. nothing. Crickets. Back to the drawing board. Instead of building a new app, I decided to make this into a full stack project using Express and Mongo. The MERN stack. I taught my self about the backend, APIs, databases etc. This was my turning point. 

By this time I felt I knew enough to be deadly but my resume was still lacking professional expirence. I did away with the cover letter and the fact that I was passionately self teaching myself at night. I learned quickly employers don’t care about that. I made it look professional, removed most of my prior jobs and listed the projects I built, was working on and my github account. 

I started to get reply’s! I also totally rearranged my LinkedIn.. making it mirror my resume and listing myself as looking for employment as a full stack dev. The recruiters flowed in. 

In my experience - I came across one recruiter who really helped my up my resume. All the other were a waste of time. What I did was begin messaging companies directly. Going to their site, find the Contact Us form and send them a message. “Hey, I’m a full stack dev looking for a great team to work with. Was wondering if you had any upcoming roles. Would love to talk” short and sweet. 

Eventually I found an awesome company that was happy to have me onboard. I’m now beginning my development career. They’re fully aware of the self taught aspect. 

My advice is think of the goal as having two prongs: the hands on coding and the job search. Invest time in both equally however make sure your dev skills are up to par first. 

Application submitted: 150
Recruiter calls that lead nowhere: 40
Interviews: 10
Offers: 1

Total time spent developing since Nov 2019: ~400 if I had to put a number on it",2020-06-30 11:31:23
gacygl,"Lyft lays off 17%, furloughs 5%, cuts current employee's salaries. Uber in talks to lay off 20%.","[Lyft](https://www.cnbc.com/2020/04/29/lyft-lays-off-17percent-of-workforce-furloughs-hundreds-more.html)

> Lyft is laying off 982 employees and furloughing an additional 288... The layoffs account for 17% of the company’s workforce, Lyft said. Lyft also has implemented reductions in base salary for employees exempt from the layoffs and furloughs for a twelve week period. The salary cuts, which begin in May, will consist of a 30% reduction for executive leadership, 20% for vice presidents and 10% for all other exempt employees, Lyft said.

Lyft's email to employees today [said](https://twitter.com/kateconger/status/1255534235596840960) ""We did not initially have plans for layoffs, but now must be prepared for these implications.""

[Uber](https://www.theinformation.com/articles/uber-discusses-plan-to-lay-off-about-20-of-employees)

> Executives at Uber are discussing plans to cut around 20% of the company’s employees... could result in more than 5,400 of Uber’s 27,000 employees losing their jobs... the 3,800-person Uber engineering group could be slashed by nearly 800 people in the coming weeks under the proposed job cuts.

Any lyft/uber interns or new grads getting impacted?",2020-04-29 16:50:10
iluwsm,Companies that have the respect to send a rejection,Fuck companies that ghost people. Getting rejected is disappointing but at least those people have the fucking respect to tell me that they're not going forward with my application. Why would a company not send a rejection or you're not being considered email?,2020-09-03 14:54:05
juvz3e,Are there any other tech companies paying workers to stay home (no work needed) due to COVID-19?,"I work in food service in the cafeteria of a Microsoft campus. Due to the pandemic, Microsoft has closed the cafeteria and allowed ALL of the cafeteria workers on my campus to stay home and literally do no work at all and they're still paying us the same amount each month.. They've even decided to give us a 2% raise recently. It's been 7-8 months now and I have not gone to work at all but they haven't fired me or any of my co-workers and they're still paying us every month. What's even crazier is that they don't expect us to come back to work until sometime in early 2021, and possibly longer..

I was wondering if there are any other tech companies that do this besides Microsoft?",2020-11-15 23:29:21
ft6k92,Anyone starting to hate working from home?,"I've been working from home since mid march since our company told us to do so because of this virus situation.  First week, I was so happy. Now I am starting to hate it.  I am unmotivated and lazy.  I can feel it from my team mates too.  The daily ""stand ups"" are shorter and barely any progress.  Anyone else feel the same?",2020-04-01 19:14:52
jd5bd5,Just accepted my first job offer with no leetcode and what I've learned,"Sorry for the wall of text in advance!

I am still in school so I am pretty surprised (super senior though), especially because of COVID. I started applying in the summer and I did get a lot of feedback, I just think I didn't realize how serious the leetcode grind was and how most jobs I applied to administered hackerrank or a live coding session. After quite a few rejections, I decided that while my experience and resume was good that I need to work on my technical interviewing skills. So I decided that I wouldn't aggressively apply and instead passively apply and work on Leetcode until the next application cycle (next year since I wont have new grad status until starting spring) and if something hit it hit.

Well something hit. I ended up interviewing with a startup in the New England area who absolutely loved me. Their team was great and any technical portions were more conversational and about projects I had worked on. In the end I accepted an offer for 72K with relocation assistance, profit sharing, unlimited vacation, and some other good benefits.

What I've learned in my three months of applying and over 200 applications is:

1. Do the leetcode grind to a point but do not be consumed. I think the earlier you start the better, because you won't be cramming and you'll have more time to let the information sink in through repetition and practice. For me, I didn't start too late, but with this being my first real application cycle where I sent my refreshed resume out I did have some anxiety because I didn't know what to expect. All but one company (the one I accepted the offer from) asked me some sort of leetcode question or had a technical interview.
2. It doesn't matter if it is a big or small company they will still put you through the ringer. After the first two months of applying I realized that without decent leetcode practice I would keep getting rejections. Almost all interviews asked some sort of leetcode question(s) and they were in the easy to medium range.  All interviews had a minimum of three interviews (including the final).
3. It mostly doesn't matter where you apply. This sub likes to post that if you apply anywhere in the midwest or low cost areas you'll instantly get a job or it will be a lot easier because they're hard up for talent. That is simply not true. I've sent applications to popular tech states like California, Washington, Texas, etc and states like Kansas, Michigan, Arizona, Virginia, etc. And it was the same experience. While my Indeed and LinkedIn reports for tech states would show 1000+ applications for a position the other states still had applicants in the 100's or sometimes more. I think because of Covid a lot more people are applying and in droves in all the areas you wouldn't think either. Also if you live in Florida, you might have a tough time if you're only applying here. Most companies are not looking for new grad or entry level. I had a friend who just got a job here after almost a year since graduation.
4. Big N and top company interviews come from either networking or dropping your application when it first opens. I had the opportunity to interview at big companies like Amazon, Microsoft, IBM, fortune 500 companies, and national labs mostly because of friends or graduates from school.  I also reached out to recruiters on LinkedIn with some success.  I also wanted to see if my resume was decent enough to cold apply and so I applied when applications were first starting to come out as well and got decent feedback. For networking I always touched base with graduates from my school and started a conversation about their happiness at work and their work culture. For many of us who want to work at a big N, we know most of the answers to questions about the company and work culture, but the employees of those companies do enjoy sharing their joy. Make the conversation less about how you want a referral and more like wow you're working on really cool things and you love working there so much do you think you could help me achieve that same level of satisfaction because what a dream?
5. GPA doesn't matter as much as you think. I only got asked my GPA if I applied to or was interviewed by companies at my career fair. I thought based off of those experiences applying was going to suck because I had a 2.1 GPA.
6. Internships Matter. Most companies gave me the time of day because I threw myself at any campus tech opportunity. I work a really easy web dev job on campus, but maintained it for a year and recruiters loved that. I also worked at a student startup as a dev and later CTO as well and showed my impact there. They liked my initiative and drive for entrepreneurship with that one. I did it for that reason. It was unpaid, but I figured most companies would like that I expressed in interest in tech ownership. That became sort of a highlight on my resume because it showed an extended project turned LLC.
7. Less than 100K doesn't make you a failure. A lot of new grad and entry level jobs were offering less than 100K even mid tier companies. The highest I came close to getting but failed the final interview was around 80K with I'm sure some wiggle room for negotiation. That 100K+ is certainly achievable if you work for a top company off rip, but not everyone can land an Amazon or Google job as an entry level and that is OKAY. The biggest thing for me to realize is there is always room for a salary improvement. I may not make 100K + now, but its not unreasonable for me starting here to do so in the next year or two with a job hop or promotion(s). You're not a failure because some of your peers beat you to it by a year or a few. Even now, I accepted the offer knowing that within the next 6 months or a year I will be pushing for a higher salary. Also we're all still killing it! These salaries and our career growth are amazing, especially in this current economy! [Less than 10% of Americans make 6 figures anyway](https://finance.yahoo.com/news/more-millennials-have-higher-salaries-than-gen-xers-boomers-185011477.html?guccounter=1&amp;guce_referrer=aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS8&amp;guce_referrer_sig=AQAAABFbFNklIuN5OuD7a2Ox4YTv-UiMLHvrj6vouCKjHJWU0fQgiFRYQranBd_RQSxeq5HFz9-OZSX7S_19bsUpT3DMoh5KllyMqfjAWNQHCDDQDKu1zJU-cjTQ1mxDdOEz7kxst2LKJlfNXQ3-Sg77Ne1EFLbqdS6--PpxcQyFyUrL)
8. It's also okay to feel dejected and like crap! It is a hard market and as new grad and entry level it can feel awful when you're applying in the hundreds with little feedback. It really makes you question your skillset and competency, especially when your friends are doing much better than you. Don't look at your friends success unless you're asking them for advice or a referral. Otherwise, be sad, complain for a minute, and within the same breath go straight back to applying. Something will hit eventually!

I just wanted to post my thoughts. I know this sub can make getting employment seem dismal or like you're a failure if you didn't land a big N, but honestly just having gainful employment with the prospect of growth is a blessing. Ya'll we can do it!

Edit: For those who don’t have any internships, I wouldn’t say you’re a failure either or it’s hopeless. I can only speak from my experience and how it was applying with internships and what made it easier. I did have friends however who had none. One friend only had research experience and got a great job at a national lab (mentioned his rec above). Another had 0 and works at Lockheed Martin. A closer one, only minored in CS and works for a private making decent money in Florida. He actually got a job in state, while I wasn’t able to get one. Meanwhile I had internships and at the time wasn’t get any bites. Really it’s all perspective. Your time will come!

TLDR: Don't give up. You aren't worthless. It will happen for you too.",2020-10-17 23:14:11
iucp54,A /r/cscareerquestions College Survival Guide,"# A /r/cscareerquestions College Survival Guide

With our final school year beginning, we were reflecting on how lost and confused we were when we first started university. We made a lot of mistakes (still am) along the way, but we’re in a much better place after learning from them and constantly putting ourselves out there. In hopes of shining some light and helping others, we decided to make a comprehensive guide for university students – based on our knowledge/experiences - on how to start your successful CS Career (or gain the wisdom to avoid CS altogether, more on this later).

/u/rishiss Background: I am a 4th year student at UC Irvine majoring in Software Engineering. I am an incoming Software Engineer at a F100 company (received return offer after interning this summer). Before that, I interned at an R & D center for space, a small cloud company, and a small IT company. I have a 3.65 GPA, won a few awards at startup competitions/hackathons, and remain pretty active in my schools CS organizations.

/u/chaitu65c Background: I’m a 4th year student at UC Irvine majoring in Computer Science. I’m currently a SWE Intern at a Unicorn and just wrapped up my 2nd internship at a Live Streaming Company(you can most likely tell who they are if you browse my history LOL). Before this, I interned at my school’s IT department, did research under a professor, and worked on a few small startups that other UCI students were building. I have a 3.3 GPA, won some awards along /u/rishiss and was pretty active in my school’s CS clubs.

Disclaimer: “But /u/rishiss/ and /u/chaitu65c, you don’t work at a Big N, go to a target CS school, why should I take your advice?” You’re absolutely right; we are, by no means, ‘up there’ like some other folks on this sub. And, you don’t have to take our advice! Simply close this tab and do whatever else you want 😊. Our intent is to guide and prepare uni students for a CS career they enjoy, not work at Big N or get the highest TC. Life is much more than a dick-measuring contest, and the earlier you learn that the better.

[We have also created a guide with our own personal advice/stories](https://docs.google.com/document/d/1QpbntzGn3DG64nYSE2Av9AlszZB2hqXWVdIqCSCj1qg/edit?usp=sharing)

## Please, take this advice with a grain of salt. we’re not Tony Robinson or Tim Apple, we’re just two random reddit users.

## Table of Contents:

This guide is divided into the following sections:

* Is CS Right For Me?
* Classes
* Projects
* Hackathons
* Resume
* Friends and Networking
* Freshman Year
* Sophomore Year
* Junior Year
* Senior Year
* Searching for Internships
* Searching for Full Time Jobs
* Final Thoughts

## Is CS Right For Me?

The way we see it, there’s 3 types of people pursuing CS.

1. Those who know CS isn’t for them – They’re in it for the money, to appease their parents, for a minor/requirement, some external factor. They hated programming while taking the introductory CS course and just try to get done with their class/degree ASAP.

**Advice**: The majority of people who fall under this usually burn out quickly, as they aren’t motivated enough to learn the material and to apply themselves. This usually leads to them cheating and getting kicked out of their major, minor, or university altogether. Even if you manage to earn a degree, we've seen a large number of these folks endure a 'pre-mature' mid-life crisis or simply get fired from their jobs. Before you even start this major, you should definitely understand that this isn’t going to be easy, and you do have to put in a lot of effort to succeed. If this isn’t your cup of tea, definitely look into switching into another major you like.

Some folks are really passionate about technology, but don't want to pursue an entire Computer Science major or see themselves as Software Engineers. That's completely ok! Try looking into related majors or minors. We know many students who switched from CS to majors like Informatics, Business Information Management, and Economics and are thriving in tech-related roles like Data Analytics, Product Management, UI/UX Design, and Technical Recruiting. CS is not (and should not be) for everyone, and there is no shame in having the wisdom quit and move on.

2. Those who don’t know if CS is for them – Where most of the CS community is IMO. These folks (like me, /u/rishiss) are riddled with something called Imposter Syndrome: “the constant feeling of not being good enough or knowing enough to do your job well.”

**Advice**: For students, really take the time to learn and be open to anything you go through. Try sticking it out until you've taken a Data Structures course, one of the harder, more important courses out there. If you're not understanding the material or just aren't having fun with it, it’s definitely ok to switch majors/careers. Otherwise, CS just might be the career for you! Give it your best shot!

Admittedly, it's hard to provide stronger insight to overcoming Imposter Syndrome, as I am afflicted by it as well. For me, my IS derives from constantly comparing myself to others and confusing inexperience with incompetency. As such, I continue to work and focus on myself and take baby steps towards smaller goals I set out for myself. Knowing that I've put the effort to improve myself by just 1% everyday has made me a lot more confident.

3. Those who know for a fact CS is for them – The diamonds in the rough. Learning and practicing CS material gives them a euphoric high.

**Advice**: Broaden your scope and learn new areas of CS! Who knows, you might find another new field that you really want to work in. Other than that, definitely make new friends regardless of whether they’re a CS major or not. Even try pursuing other hobbies like weightlifting, reading, dancing, or even public speaking. Don't limit yourself!

## Freshman Year

We recommend not taking more than 3-4 classes in your first quarter/semester, as you shouold keep an ample amount of time to go to professional/social events, make new friends and hang out with them, and pursue your interests.

We've seen a lot of freshmen (and upperclassmen) CS folks get cooped up in their dorm rooms playing video games and watching TV. We understand that these two are a passion for many, but please be cautious to not get consumed by them.

You have the privilege of pursuing higher education, making valuable connections/memories, and setting up your CS career in the trajectory you want. This year is the best year to take advantage of all that university has to offer; make the most of it.

One of the best ways to get involved in your school’s/region’s CS community is by joining clubs like ACM and WICS and participating in hackathons (see ‘Hackathon’ section below). Try pursuing internships and positions in these organizations and events as well!

One, major issue we see with freshmen (even upperclassmen) is their ignorance on all the avenues available in the CS Industry. So we’ve tried to narrow it down (not exhaustive).

1. Cyber Security Engineer
2. Front-End Web Developer
3. Backend Web Developer
4. UI/UX Designer
5. DevOps/Cloud/Site-Reliability Engineers
6. Mobile Engineer
7. QA Engineer
8. Product Manager
9. Data Scientist (Machine Learning/AI)
10. Embedded Software Engineer
11. Systems Administrator
12. Database Administrator (The Wizards)
13. Networking Engineer
14. Hardware Engineer
15. OS Developer
16. Video Game Developer
17. Solutions Architect/Sales Engineer/Technical Account Manager

As a freshman, definitely take the time and see if you can picture yourself doing any of the listed fields. You should open yourself to all facets of CS and not just the “hot field” like Data Science and Machine Learning. Choosing a field because it’s “exciting” will usually lead to bad results as usually, other people are thinking just like you and will lead to over-saturation.

Our recommendation is to select the top 5 fields that have piqued your interest and experiment with the field. For example, if you are interested in Mobile App Development, try learning how to build an Android app from the ground up. A simple weather app or alarm clock is completely suitable for a first project/prototype. This lets you understand what skills you would need for this field and can serve as a forecast as to what your career would look like.

You should definitely look for an internship. Ignore the people that tell you to wait until you’re a junior, as it’s going to be very hard to get an internship if you don’t have any experience. Common places that most students don’t realize are available are usually IT departments at your school and even research with professors. Researching is highly recommended as you can definitely learn more about a field you can be interested in and if you’re interested in graduate school, that’s going to be a letter of recommendation that you can ask for.

If you’re considered a minority in Computer Science, look into first and second year internship programs as they’re meant to help you succeed. Here’s some programs that come to mind:

[Google STEP](https://buildyourfuture.withgoogle.com/programs/step/)

[Microsoft Explore](https://careers.microsoft.com/us/en/job/870951/Internship-Opportunities-for-Students-Explore-Program)

[Amazon Future Engineer](https://www.amazonfutureengineer.com/)

[Uber STARInternhip](https://www.uber.com/global/en/careers/list/62885/)

[Facebook University](https://www.facebook.com/careers/students-and-grads/students)

Another way to get internships is to research into smaller companies in your area. If the company is very small (<100 employees), consider reaching out to the CEO on LinkedIn. They might be able to help you! Also, take advantage of university recruiting websites like Handshake to see companies that directly hire from your school. More info on how to get an internship in the ‘Searching for an Internship’ section.

## Sophomore Year

Now that you have basic programming knowledge, create your own website or GitHub account and start contributing to them with small personal projects. Nobody expects you to make a full-stack MERN project hosted and scaled on AWS at this stage. Focus instead on clean code, learning a framework or two on a language you like, and creating a small, robust feature. Grow from there!

If you weren’t able to find an internship/research opportunity as a freshman, community involvement, projects, and hackathons become especially important, as they are a great way to make you stand out on your resume and to recruiters when you reapply. As you brush up on your skills, apply again, and try your luck out.

## Data Structures and Algorithms

In addition, you are most likely to take a Data Structures and Algorithms course this year. Make sure you are focusing on this class and writing good notes; you will need this knowledge when interviewing for internships and full-time jobs in the near future. Here is a link to our DS and A course (in C++) for [reference](https://www.ics.uci.edu/~thornton/ics46/Schedule.html)

## Junior Year

As a junior, companies are more willing to hire you for an internship, as they are likely to convert you into a full-time employee after graduating. This transition process is much easier than interviewing, and they'll usually offer you a higher compensation package if they want to convert you to a full-time employee. As you now should have knowledge of Data Structures and Algorithms, we highly recommend looking into coding interview prep sites like LeetCode and HackerRank or purchasing a prep book like CTCI or EPI (advanced).

Continue to attend hackathons, remain active in clubs/organizations, and grow your portfolio.

Classes will be much harder; expect the time for completing projects to double and the content covered to be much more difficult. We recommend taking no more than 2-3 upper-division CS courses and balancing your load with 1-2 GE classes. You should not be taking more than 16 units (assuming 4 units per course).

Start to get an idea of what field in CS you would like to pursue. Research what it takes to be successful in that field. You can do so by looking up job postings with that title on LinkedIn and looking at the requested skill set or take a look at [Roadmap.sh](https://roadmap.sh/). If you want to learn more about a related skill set and your school doesn't offer a course, consider picking up a class on udemy.com.

## Senior Year

Focus heavily on your senior capstone, project classes, etc. as they're the last thing you can put on your resume before applying for full time. By now, you should have at least 3 polished, working projects on your GitHub that you can easily talk about with your recruiter. Preferably, they're aligned with the CS field you wish to enter.

If you were able to get a return offer from an internship, congrats! However, don’t immediately sign the offer. Once you have an offer, you should still try to interview at companies that you’re interested in by the deadline of the time to accept the offer. A good way of doing this is to reach out to a University recruiter for that company and explain the deadline you have. Usually, they’re really helpful and can potentially help skip interviews that you were supposed to do!

In addition, if your friends were able to intern at places you’re interested in, definitely ask for a referral or to send your resume to their recruiter. This usually reduces the risk of being ghosted by that company and increases your chances of getting hired!

Once you finally sign, definitely take the time to relax and enjoy.  Just make sure you pass your classes and stay out of trouble

## Classes:

## What Classes should I take?

## Should Already be Required:

* **Programming in Java/C++/Python (OOP)**: This is how you’re gonna start coding.
* **Boolean Algebra/Discrete Math**: Teaches you some background knowledge to CS.
* **Data Structures and Algorithms**: Teaches you some ways data is stored and retrieved. Very important as you’re going to be using them a lot.
* **Low Level Programming /C**: Teaches you what coding used to be like in the old days.
* **Computer Architecture**: You learn what makes a computer a computer including things like logic gates, registers, memory, and more.

## Must Take:

* **Computer Networks**: Highly recommended as it helps you understand Web protocols like HTTP, TCP, UDP, etc.
* **Operating Systems/UNIX**: Most important class. Teaches you important things such as the kernel, Threads vs Processes and Process Schedulers.
* **Databases/SQL**: It’s very likely that your job as a software engineer will be to interact with databases. It’s really good to understand what they are before you enter the industry.
* **Programming Languages**: Teaches you trade offs between languages like C and Python. It definitely helps when you need to pick up brand new languages!

## Good to Have

* **Full-stack web dev** (pref MERN stack, our school offered both LAMP and MERN)
* **Very deep understanding of at least one language.** (You’ll be surprised to learn how many students who graduate fail to do this)/
* **Semester/Year-Long Capstone course (pref working with a company) if your school supports it:** an internship where you get school credits instead of money.
* **Compilers**: Teaches you how programming languages are implemented 'under the hood.'
* **Human Computer Interaction**: If you weren’t able to learn Full-stack web dev.

## How do I succeed in these classes?

/u/rishiss: You’re more than likely coughing up hundreds, if not thousands, to attend university. It makes no sense to not take full advantage of the course and course staff.

* **Do the readings beforehand** – Dr. K explains [how studying before class is an OP mechanic](https://www.youtube.com/watch?v=mlk0NAA3I48), also highly recommend this video on [how to study](https://www.youtube.com/watch?v=Lw4dMehQkgs) by him as well
* **Attend EVERY lecture, sit at the front of the class** – I’ve seen a metric fuck ton of students in the back of the class with their laptops shopping, trading stocks, scrolling through Reddit, even watching lesbian hentai. By sitting in the front of the class, you’re forced to stay engaged (and close your porn tabs).
* **Take notes**– People have many, different ways of taking notes; stick with what works for you.

*The way I take note*s: I learn from examples; I want to enter my code into the IDE to see what happens. I do a three way split; Google Docs on the left, IDE on top right and terminal (to compile, see output, make new file, etc) on bottom left. I note down the date and topic of the lecture and write questions I have in the comments on Docs. I make sure to highlight important information and possible test questions. I even share the link with friends!

&#x200B;

* **Make a study guide, even though the professor does not give you one** – Using my Google Docs notes, I compile the highlighted information into a summarized study guide. It’s a fantastic review tool. I’ve even shared the study guide with professors/classmates and gotten their feedback and extra information.
* **Go to office hours and become close with 1-2 professors** – Some jobs and most masters/PHD programs require letters of recommendation. While you could get reccs from your work, its great to get a letter from someone in academia, especially if they’re established in the field you are pursuing. Get your ass to office hours and show professors that you are curious and motivated by asking questions about assignments, career, or even personal interests. They provide a cornucopia of opportunities, including research, letters of recc, or even the opportunity to pursue a PHD under them.
* **Make friends!** \- Classes are a great way to meet new people with similar interests and expand your professional network. They can especially be a saving graves if you miss a class, don't understand a topic, and need motivation to prepare for an exam. Don't be afraid to say hello!
* **START EARLY ON ASSIGNMENTS** – I can’t count the number of times starting an assignment early saved my ass. Starting early gives you time to deal with the unexpected: the family emergencies, the late night hangout with friends, the memory leak on line 74. Procrastination is like playing Russian Roulette with your CS career, don’t take the chance. [A helpful video on procrastination](https://www.youtube.com/watch?v=TvRtVuwcrnY)

In the quarters where I followed the steps above, I never got a grade lower than an A-.

## Dealing with Bad Professors

During your time in college, you’re likely going to have at least one bad professor that might make it worse if you have to go to class. If that’s the case, it’s definitely fine to not go to class (as long as it’s not mandatory). However, if you do decide not to go, you must make sure you learn the material, so you won’t be behind on the coursework and studying for tests. In addition, you should be doing something productive on the side. If you don’t go to class and spend the time watching Netflix or playing video games, you’re losing time that you can spend on something that might be fun and can help you in the long run.

## You can take Graduate Courses!?

/u/chaitu65c: A highly underutilized set of courses you can take would be graduate courses. Graduate courses are usually very specialized in certain fields. If you were able to take all the undergraduate courses you wanted and still have spare classes to fill out, I'd recommend researching into taking Graduate courses! They’re a good way to build out your specialization and learn new, cool stuff! In addition, if you’re looking for classes to reach the required number of CS courses needed, your CS department might allow you to make the course count towards your degree!

## Projects

**They're super important.**

## How do I succeed in class projects?

* **Reading the Project Requirements:** Before starting to code, read the requirements and understand what you need to do in order to finish. Too many students ask for help that can easily be found in the requirements which wastes the student’s time.
* **Learn to Debug:** Learning how to debug saves you countless hours trying to read through code you might not understand.
* [**Learn to write Clean Code**](https://medium.com/mindorks/how-to-write-clean-code-lessons-learnt-from-the-clean-code-robert-c-martin-9ffc7aef870c): With this and being able to debug, you’re going to be able to write very efficient code and to debug issues easily, thus not making you only successful in lab assignments, but also making you a better programmer.
* **Plan your work out:** This allows you to simplify the logic you are writing and this usually leads to clean code.
* **Ask for help:** If you ever get stuck on something and no matter how much you Google and you can’t figure it out, ask for help. It’s definitely fine to ask for help and is HIGHLY recommended you do so. Take advantage of the lab tutors and TA’s either through in person or Piazza/Canvas; they’re there to help you.
* **Draw Pictures:** If your project involves multiple things (AWS, Databases, Servers, etc), it’s definitely a good idea to draw a picture that shows you each thing interacts with and how it comes together. This is important especially when you enter the industry and build software for companies.

## Personal Projects and your CS Career

/u/rishiss: Projects are your saving grace, especially if you are lacking work experience. They show technical aptitude, willingness to take initiative, and leadership. I’ve seen people with only projects on their resume get positions at the Big N. Projects are good ways to expand your knowledge of CS as the possibilities are endless! It is best to have a variety of projects dealing with a variety of technologies. As such, you can open yourself up to more positions and have more talking points during the interview.

I tend to edit the ‘Project’ Section of my resume with relevant projects and technologies. For instance, if I made a full stack web application and applied to a DevOps organization, I would highlight my AWS, CI/CD, and Terraform experiences more than my React/Node js work.

It is recommend the project is about something that motivates you and are passionate about e.g. video games, movies, books, sports, etc., as it is very easy to give up half way due to stress or lack of motivation/interest.

Like anything else in Computer Science, projects require you to break it down into smaller pieces. Start with the end in mind and draw out the intended architecture/functionalities. Start with what you know and research on the parts you don't know after that. You will be using these skills often in industry for any project/feature planning.

Spending 15-30 minutes a day is all you need to make a successful personal project. Don't make excuses and get coding!

## Open Source Contributions

If you’ve ever noticed popular github repositories such as torvalds/linux, these are repositories where people from all over the world can report issues with it and someone can fix it. If you are able to make a contribution to a huge open source repository, it looks really good on your resume.

## Hackathons

## What are Hackathons?

Hackathons are large scale coding events, where students from around the area come together and collaborate - usually in teams of 4 (but you can go solo or with a partner!) - to build some software. Companies like Amazon, Northrop Grumman, Google, and Twilio sponsor awards related to best use of their technology. After 24 - 48 hours of intensive coding, participants submit their projects, whether it be an Android video game, Chrome Extension, productivity web app, etc. Submissions are shared with the companies and other hackathon organizers, where they select the best projects and award teams with swag like keyboards, gift cards, and even summer internships at their company.

Participating in hackathons are one of the best ways to hone your coding skills, network with companies and other students, and get free comfy T-shirts. It is also one of the best ways to gain industry knowledge, as representatives from these companies and hackathon organizers create numerous workshops and answer any questions you may have. Winning awards at these hackathons are also great resume boosters and talking points during interviews.

The biggest hackathon organizer is [Major League Hacking](https://mlh.io/). Visit their website, and you can see all the hackathons (remote or local) they are partnered with. Make to be on the lookout for application release dates from the hackathons and apply early.

With Covid, you may miss out on the free goodies and the in-person networking with students and professionals. However, most hackathons are accepting many more applicants due to it being virtual/remote this year.

## What Should I Do At Hacakathons?

Take advantage of the resources available at hackathons. You’re attending a mini CS conference and should be, besides coding, networking with professionals, learning about the different companies, attending workshops, asking technical/non-technical questions to mentors, and getting as much free shit as you can get. Besides T-Shirts, companies give out vouchers to their services, applications to their internship and full-time positions, pillows, notebooks, water bottles, sweaters, and even backpacks.

If you’re looking to get an award, judges at hackathons care a lot about the pitch and the idea rather than the actual execution of the idea. Having an idea beforehand is also helpful, so you can spend your time focusing on the MVP.

## Friends and Networking

/u/chaitu65c: I think it’s definitely useful if you have two different friend groups: One dedicated to career and Non-Career Group.

Career Group - When making a friend group dedicated to career, try to be the dumbest person in the group, you’re definitely going to learn a lot from them as you soak up knowledge! Best ways of meeting friends who are career-driven can be through major specific orientation (actually how I met /u/rishiss), courses, major related clubs, etc.

Non-Career Group - While having a group that motivates you for your career is important, it’s also important to have another friend group that can help you relax and to enjoy your time! A really good way to find these friend groups can be anywhere from your hall to General Education courses, social clubs like Circle K, fraternities/ sororities(if that’s your cup of tea) and others!

This is what has worked for us; no need to follow this exact format.

## Resume

/u/rishiss: Here are the few take-aways on writing a resume that gets through the ATS.

* **Make your resume accomplishment driven, not just a list of your responsibilities** – [This guy puts it best](https://www.linkedin.com/pulse/20140929001534-24454816-my-personal-formula-for-a-better-resume/) TL;DR: Your bullets should be in the format -> Accomplished X by doing Y as measured by Z.
* **Don’t put school projects that every other CS student in your school has completed.** Recruiters are able to figure it out and will look down upon this a lot, as it shows you’re not doing anything outside the classroom to forward your career. Capstone projects are perfectly okay.
* **Make it a simple, one-column that recruiters can easily read through.** There’s no need for pictures, graphics, colors, fonts, etc; the ATS can't parse this! Overall, keep it simple; the content should be carrying you.**Exceptions:** The company you are applying for is small, you’re going to a career fair and you know your resume will be hand-read, you’re a UI/UX person or a Graphic Designer.
* **Have at least 3 minimum (I aim for 4-5) per work experience/project**; it makes no sense when you have such amazing experience and only put two bullets.
* **If you have a GPA lower than a 3.0, do not bother keeping it on the resume.** If you have a 3.5 +, make sure to keep it.
* **Make formatting consistent.** This should be a no brainer, but I still see folks’ resume with different fonts, spacing, etc. It’s annoying; don’t do it.
* **Focus on individual contributions and leadership, not the team.** Recruiters are looking for self-starters and leaders that can see a project throughout the life-cycle, not just another code monkey.
* **Expect to be tested on anything you put on your resume.** If you don’t think you can answer questions about a skill, tech, or experience on your resume, don’t bother putting it in.
* **Make sure to add these items in your resume:** Name, School, GPA (unless its less than 3.0), Work Experience, Projects, Skills (one line for languages, one line for tools/platforms are what I’ve seen the most), relevant links (GitHub, Website, Portfolio).
* **Take out any old or irrelevant experience.** Nobody cares about that Tic Tac Toe game you made in high school.
* **Get your resume reviewed multiple times by experienced people in tech.** /r/csMajors and /r/cscareerquestions also has a weekly resume roast thread that you can take advantage of.

## Searching for Internships

Searching for internships in CS is really different and harder from searching for internships in other professions. CS internship interview processes are often longer and much more technical on what you have learned as a CS major. We've prepped 2-3 months beforehand on CS concepts, whiteboarding, etc.

## Timeline

This timeline primarily focuses on large, non-government/defense companies or competitive startups. This also assume you are applying for a summer internship.

**August - September:** Applications are opened to the public. Make sure to look out for positions and apply early, as most companies admit students on a rolling basis. A site that we used often is [Apply.fyi](https://github.com/rishisshah/reddit_guide/blob/master/apply.fyi). After applying, you may receive an automated (< 48 hours) invitation to complete an Online Assessment, consisting of multiple choice and/or coding questions about Data Structures, Algorithms, and Run Time Complexity. You will have usually 1-2 weeks to complete the assessment. Please that you may be rejected if you are not able to pass 90% of the questions on the assessment: Please also note that you may be instantly rejected due to things out of your control like years of experience, cancellation of internship, internal corporate issues, and more. Don't take rejections too seriously; just keep applying!

**October - November:** After passing the resume screen and the OA, you will be contacted by the company's recruiter for a phone screen. During the screen, you will probably be asked a few confirmation questions about your resume, sponsorship, years of experience with X, etc. and minor behavioral questions like what made you apply for this position, what are you pursuing outside of class, etc. You may also receive questions about your CS fundamentals e.g. what is a hashtable, whats the difference between a process and a thread, what is the runtime complexity of sorting a string, etc. As long as you're cool and confident (and not cringe/edgy), this part should be a breeze.

**November - Mid January:** If you made it through the two Thanos snaps, you will be invited to an onsite “Power-Day,” where interviewees attend 2-4 whiteboard interviews while being grilled on their technical skills and projects. Some companies make applicants go through a panel interview, where a team of 2-5 Software Engineers grill you on technical questions and your resume. You are often pampered with free travel, food, stipends, etc.

**December - February:** If you were deemed a good fit by the hiring committee, you will be extended an offer to intern at the company during the upcoming summer for 10-12 weeks. Remember, nothing is final until you receive an offer letter in your inbox. Some companies may also place you on a wait-list and offer you a spot if someone were to reject their offer letter.

For government orgs, defense companies, and smaller organizations, the recruiting season starts in February/March and usually ends in April and May. After applying online and passing the resume screen, you will usually be immediately pushed to an on-site interview. Most likely, you will be interviewing with your future boss/co-worker.

Please note that internships are not only offered in the summer, they are provided in the Fall, Winter, and Spring (rare) as well. The competition for these internships is usually lower, and the process usually starts 3-4 months beforehand.

## How to get the Interview

Besides following resume tips, make sure to apply to as many places as you can. To get our first internships, we recall applying to approximately 250-300 places before we secured our internship plans for that summer. Also, if you do get ghosted, don’t take it personally, usually, university recruiters often spend so much time reviewing a lot of applications.

Other precautions to take to get noticed are to try attending career fairs if you can, you might be able to get an interview(worst case, free swag!). Other than that, try reaching out to upperclassmen or friends you know that interned and ask for referrals. It’s one of the best ways to get noticed!

## What to expect

As part of the interview process, there’s 4 types of interviews that you should make sure you know.

**Behavioral Interview:** These interviews ask you questions about culture fit such as “Why are you a good candidate” and “Tell me about a time when you ...”

**Coding/Technical Interview:** These interviews ask you questions similar to what you see on Leetcode and Hackerrank. These interviews are designed to test your Data Structures and Algorithms knowledge.

**System Design:** System Design involves the interviewer testing your building to design a service/software and test your knowledge of understanding what things to use for the task and how you will integrate them together. You’re definitely not expected to know this and it’s not likely you’re gonna get asked this. Places that could ask you this are Unicorns, Trading Companies and Hedge Funds, and Big Established Companies.

**Concurrency/Low Level Interviews:** If the company’s biggest product involves low level principles such as networking principles and kernel stuff, there’s a possibility you can get asked this. Places that come to mind are hardware companies and trading firms.

Some companies may adopt only one of these interviews and some may adopt all.

## How to Ace the Interview

It’s highly recommended that you look up the interview experiences that other students have faced so that you can potentially filter out companies with red flags and know what questions to expect. Common sources to search up on this would be Reddit (r/csMajors and r/cscareerquestions), Jumpstart (Relatively new portal for students), Glassdoor and maybe Blind (Aside from the toxic TC or GTFO culture, they do give good advice on interviews). With that said, here’s some advice we have when you approach each kind of interview we’ve seen.

## Advice on Behavioral Interviews

Use the [STAR method](https://www.thebalancecareers.com/what-is-the-star-interview-response-technique-2061629) when describing your experiences. Being quantifiable with the impact of your actions will impress the interviewer.

## Advice on Technical Interviews

Begin by reviewing your notes from the Data Structures and Algorithms class. Do not proceed further until you know how to implement these DS and As from scratch with the language of your choice(If you do know python, it’s recommended as there’s a lot of builtin features!). After doing so, we highly recommend a book like CTCI and EPI to gain a review on programming language details and your DS and As. Then, visit sites like LeetCode to practice real questions from major companies. A Facebook Engineer completed 600 LC problems and compiled the most important ones into a [list here](https://www.teamblind.com/post/New-Year-Gift---Curated-List-of-Top-75-LeetCode-Questions-to-Save-Your-Time-OaM1orEU). During the interview, make sure to talk out loud about possible approaches and tradeoffs before whiteboarding. It is perfectly acceptable (often recommended) to ask the interviewer to ask questions about the problem and get clarification. Once you have an idea in mind and have talked about it with your interviewer, begin whiteboarding. While you talk about the final idea you want to use, write out pseudo code and comments about all the steps you need to implement in order to finish coding your solution. After that, start coding. Make sure to have proper function headers, syntax, spacing, classes/structs, imports, etc. After coding your solution, give a brief explanation and attempt to make it run with less space and in less time (if your solution is not as efficient as you think it can be).

## Advice on System Design

These are somewhat hard to approach if you don’t have experience ever doing it. If you do have experience designing and building services in your spare time and as part of your work experience, definitely rely on your experience. An important thing is to definitely ask clarifying questions. There might be hidden requirements you didn’t think about that could drastically change the way you approach the solution.

## Advice on Concurrency/Low level

Understand basic principles such as Processes vs Threads (A lot of people don’t know the difference!)TCP vs UDP and how to make an application thread safe. Other than that, it’s recommended that you familiarize yourself with basic OS concepts such as Deadlocks, locks that you can utilize to make an application thread safe, etc.

## Searching for Full Time Jobs:

**The big bucks.**

The process for finding a Full-Time Job is usually very similar to finding an Internship. There’s three main differences are:

1. **Harder Questions**. Ex: Google usually asks Leetcode Mediums to Hards + the special Leetcode Hard question that Google asks it’s applicants (they create a new one every year).
2. **More Rounds of Interviewing**: For example, Microsoft makes interns do 2 rounds while New Grads do 4 rounds during the onsite part of the process.
3. **Compensation**: Interns usually get an hourly rate and, possibly, a housing stipend. New grads, however, are given a yearly salary and, possibly, a sign-on bonus, stocks, and benefits e.g. health insurance, vacation days, etc.

The process for finding a Full-time Job won’t really change as much as finding an internship, but keep in mind that the bar is higher. This is probably the biggest reason why you should look into interning early; by getting an offer at the place you like, you don’t need to go through the daunting process of finding a full-time role.

Get as many offers as you can this time around, so you can negotiate and select the position, company, compensation, and location that works best for you.

## Negotiation

Negotiation is a really powerful tool that you can use in the interview process, even as an intern. There’s a lot of guides to negotiation and we recommend Nick Singh’s guide (Look at his LinkedIn and newsletters) for more.

## Final Thoughts

University is a probably the most important time of your life and a foundational block of your CS Career. Like any foundation, it must be sturdy and takes a tremendous amount and energy of time to develop. Take advantage of all the resources (like this one) you can get your hands on. Definitely learn from the mistakes people have made and make sure you don’t repeat the same mistakes.

‘Stay hungry. Stay foolish’ - Steve Jobs",2020-09-17 04:53:01
ilcype,I got my first job offer!,"So I interviewed with a company last September during my last year of college for an internship with a pretty well known company. I got the internship offer in October and I started in June. The internship was for the summer in software development on one of their teams, with the possibility of full time at the end of it.

The pandemic happened and I was so afraid of my internship getting cancelled, but nonetheless they decided to continue remotely and luckily I have been able to work from home since then. These past months have been tough, I wanted to quit because self doubt and just stress of learning on the fly, feeling hopeless, and most importantly imposter syndrome. However, yesterday I was offered a full time position with the company with pay more than I would have ever imagined. 

I’m extremely happy and grateful for this opportunity especially in times like this. I’m also extremely grateful to have the same company I interned with offer me a full time position as a full stack developer. I’m excited to start my career with this company. 

Just thought I’d share my excitement. :)

Edit: Thank you all for the awards. :)

Edit: I appreciate everyone’s positivity. Thank you all so much!",2020-09-02 18:55:08
kg2g24,CS Rich Kids vs Poor Kids,"In my opinion I feel as if the kids who go to high-end CS universities who are always getting the top internships at FAANG always come from a wealthy background, is there a reason for this? Also if anyone like myself who come from low income, what have you experienced as you interview for your SWE interviews? 

I always feel high levels of imposter syndrome due to seeing all these people getting great offers but the common trend I see is they all come from wealthy backgrounds. I work very hard but since my university is not a target school (still top 100) I have never gotten an interview with Facebook, Amazon, etc even though I have many projects, 3 CS internships, 3.6+gpa, doing research. 

Is it something special that they are doing, is it I’m just having bad luck? Also any recommendations for dealing with imposter syndrome? I feel as it’s always a constant battle trying to catch up to those who came from a wealthy background. I feel that I always have to work harder than them but for a lower outcome..",2020-12-19 05:59:25
jzjks4,SQL is terrifying,"I just tried to update the values for a row in a table used to perform quality checks on the company’s most important database tables. but I accidentally had a semicolon before my WHERE clause, so it updated every single record in the table with the new values. And there were no backups",2020-11-23 15:24:23
g0yuex,I have become a soulless zombie and I honestly do not care.," 

In a retrospective recently, no not a code review, I become aware that my behavior has completely changed. My family and old friends do not recognize me as the same person I once was. My life is completely different now than it was just a few short years ago. My mother looked at me over video conference at Easter and suggested this, and I was quick to brush this off, but she was absolutely right.

I used to be quite social and active. Through college I was an avid runner and involved in an honors fraternity. Never went to an elite school but always was driven by a passion for technology. I made many friends and frequently spent my weekends with them. That soon changed. I’d say it was after my Sophomore year I got consumed into the world I live in now. My first internship, at a small and unknown digital media company. I quickly discovered minimum wage was not the “standard intern pay” I had been told and people all over the world were making full time wages at much larger tech companies. From there I was hooked.

Junior year on I balanced internships at 30 hours a week with 18 credits in the evenings. I managed to score a salaried position while I finished up my classes and then spent a few months using every extra hour to build a portfolio and do every single DS&A (Now leetcode) problem I could find. It could have been my birthday, I was still going to do my evening leetcode.

Even after this I would work and consult, work and consult, find new jobs on a semi yearly basis, enhance my portfolio, more leetcode. Soon 5 years had gone by. I was nearing 27. Then I started with building up start ups and selling apps and ideas. Then came 32. Now what? I haven’t had a love interest in nearly 10 years. I have no interest in a family. No interest in doing anything but developing towards my own success. And I am successful, but I have given up the pursuit of everything else in the process. Forgotten what it means to be human. And the saddest part is… I just don’t care.

I don’t notice it at all. I see pictures of those I graduated with and they have families, it does not phase me. Tonight I had to convince myself to step away from my work, have a drink, and compose this. So that somewhere, someone, will heed this and not fall victim to my own misdoings. You need not torment yourself with your work, you live life for purposes beyond just self success and human innovation. Don’t seclude yourself, else you may find it far too late to attend to your mistakes.

In a way I still have no regrets, I did what I set out to do, and will continue to do so, regardless of any intervention. I surpassed every expectation I ever had for myself. But I desensitized my humanity in the process. And this is something I can never take back.",2020-04-14 04:28:07
if2z4u,A company being pressured to do 50/50 gender parity workforce,"Obviously am using a throw away here.

 

But I would like to rant this out. 

Full disclosure. I am all for empowering women to fight against harassment. Give women a lot of tools to fight against people in power of the company. I am also all for higher maternity benefits. Its a shame that maternity benefits are not regulated in the country and there should be higher benefits. And I am against people viewing that being a women means that they have less tech skills than men. I am also all for MINIMUM % of females at the company. 

&#x200B;

The size of the company is around 100 people. Of which 40 are in tech. Of the 40, 12 are women. The rest of the 60 people departments are pretty much 30 men and 30 female. 

&#x200B;

Ever since, Canadian PM made sure that his cabinet will be 50% female and 50% male, in my experience there is a huge pressure for companies to close the gap that being employed between women and men. 

&#x200B;

During leadership meetings, women are constantly asking why they cannot find more female developers and constantly tell the leadership team to remove bias for women. At one point, one of them threaten to make it public that the company is not trying hard to be 50% women in tech. Cause if the PM can do it why can't the company do it? Already bootcamps and dev degrees in canada are 50/50 gender parity. [https://devdegree.ca/](https://devdegree.ca/) So there should not be any excuse for the company to not be completely 50/50 gender parity. 

&#x200B;

Then came the hiring for 5 more developers and even though we were open to all genders. I was a part of the hiring team and We disregarded several amazing male candidates. I was told privately that they have to do this because of constant pressure from the employees plus they need to look good in from of investors. 

&#x200B;

Finding good female candidates were extremely hard eventually we did find some but they were such in high demand its difficult to convince them to join our company because we are still pretty new. In the end what happened was that we had to offer them a higher salary. In the end we hired 5 employees where one was male and the other was females where some of the females have 15k higher salary then their male counter parts even though imo the male is stronger than them technically. i was part of the hiring team so i have the assessments.

&#x200B;

The purpose for me writing this because i wanted people to be aware of it. IMO, this is not the right direction to solve gender discrimination. But companies are being forced to do this out of the fear of losing investors. 

&#x200B;

You may think its okay to hire people who are not the best but they are qualified females, please state your arguments so that I can discuss with you. To me this is forced and it may cause even more gender discrimination. For example this is happening to bumiputera in Malaysia where people from other races view them that they did not earn their success and take advantage of the system. 

  
Regardless, I am all for minimum % but not completely close the gap. Minimum% because if a boss is clearly toxic against women then they could back each other to fight against the toxicity. 50/50 is ways too forced and imo will have a larger adverse effect than the marginal benefit it will provide.",2020-08-23 13:14:42
ek6mik,I interviewed with ~20 companies for a Senior Software Engineer position in Bangalore and Toronto - Here is a list of questions I was asked,"Hello folks, 

I stumbled across [this older post](https://www.reddit.com/r/cscareerquestions/comments/apu3ni/a_list_of_questions_i_was_asked_at_top_tech/) on r/cscareerquestions, and wanted to share some questions I was asked during my recent interviews as well. I decided to switch jobs earlier this year and interviewed with multiple companies in Bangalore(India) and Toronto(Canada). The following are some of the companies I tried (all non-FAANG):

1. Atlassian
2. Shopify
3. Swiggy
4. Instacart
5. Okta
6. Borealis AI
7. Arista Networks
8. PaytmLabs

The following is a (non-exhaustive) list of questions I was asked during different rounds.

**Coding**
1. Find word in a 2D matrix
2. Top K frequent words in a list
3. Find median for a stream of integers
4. LRU cache
5. Least Common Ancestor in n-ary tree
6. Closest element in BST
7. [Print numbers in sequence using 2 threads - one for odd and one for even](https://knpcode.com/java-programs/print-odd-even-numbers-using-two-threads-java/)

**CS + Programming Language fundamentals**
(My language of choice was Java)
1. How are indexes implemented in a SQL database? How do reads/writes work with indexes? (This was the most common question asked across all the companies)
2. What is the `volatile` keyword in Java?
3. What are the different transaction isolation levels in a SQL database? (Followed by probing questions on some of them)
4. How does a `ConcurrentHashMap ` work in Java?
5. Explain CAP theorem and eventual consistency.
6. Garbage collection

**System Design**
1. Design a pub-sub system without persistence
2. Design a URL shortener
3. Design a email/messaging system
4. Design Quora feed page
5. Design a system for processing jobs(whose information is stored in a database) in an exactly-once fashion
6. Design a Youtube clone
7. Design a Json Parser
8. Design a data pipeline for a Machine Learning system
9. Design a multi-level cache

**Behavioral/Managerial Rounds**
1. What is the most difficult technical challenge you've solved?
2. Tell me about a recent project that you are proud of. Why are you proud about it?
3. How do you mentor other engineers in your team?
4. A time when a deliverable got delayed - 1. not because of your fault (eg. requirements changing) 2. because of your fault - How did you handle it? How did you communicate this to impacted teams? What did you do to ensure it doesn't repeat?
5. What challenges are you looking for, in your next company?
6. Tell me something that's not on your resume.

Edit:
I am a computer science graduate with around 8 years of experience, since some folks in the comment wanted to know.",2020-01-05 02:27:16
i64ft7,I compiled a list of System Design Resources (Awesome System Design list). I would love contributions and engagement. - GitHub,[https://github.com/madd86/awesome-system-design](https://github.com/madd86/awesome-system-design),2020-08-08 18:47:22
kd13sx,Sharing the System Design framework I’ve used that has served me well,"I recently got back to interviewing, and thought I’d share the framework I’ve been using for system design interviews that has netted me offers at places like Google, Facebook, Uber, Microsoft, etc. Previously, I’ve also conducted numerous interviews and also been in hiring committees from the inside of these tech companies, so I felt sharing the angle from the interviewer’s point-of-view could be helpful.

Side note, this is not a replacement for studying your stuff. There are numerous resources I’ve used to prep and brush up on my fundamentals (there are a bunch shared in this subreddit alone). This is primarily a tactical framework I use to get that additional bump, which is often helpful when your hire/no-hire decision is on the boundary.

First, I think about these 3 points throughout the whole interview. Unlike the coding section, there is no formal answer on design interviews. It’s often not about the answer you produce, but how you get there.

1. **Speak out your logic**
   1. Remember, everything is a tradeoff. Everything. Even expanding that field in your DB that will enable a critical user feature, or adding a test that will prevent that recurring bug comes at a cost. Don’t even think about adding a load balancer or async task queue until you understand why that is the most effective use of your company’s engineering resources at that time. So talk about this. Speak it out. Say that you would start by monitoring where the bottleneck will happen with the increased traffic, and give your reasoning on why you believe service “x” is where you would start increasing instances, and what would be the cost of such. Don’t always have to go into depth, but try to formulate your design decisions around “given (because of) A, I would do B”
   2. One added benefit is that it gives you a fast way out should your decision be wrong. You might find that your logic is incorrect midway while you’re speaking out your logic. It might also expose a logic that comes from a misinterpretation of the requirements in which case you give a chance for your interviewer to correct your assumptions. The worst thing is when you have seemingly made up your (incorrect) decision, and the interviewer is not sure why you made that decision and is waiting for it to possibly make sense, but it never does and has to correct you 10 minutes later. By speaking out your logic you fail early and also have given a reasonable reason on what you took that path.
2. **Read the room**
   1. So I lied above that “it’s not about the answer you produce, but how you get there”. Although it shouldn’t be, in practice your interviewer has already used this question a few times and knows the parts a good candidate should be covering. If you do your homework well you should be able to get 2/3 of your way to what the interviewer wants, but how on earth are you going to cover designing an Instagram feed in 45 minutes comprehensively? So if the interviewer starts talking about data failover, make sure you immediately pivot over to that topic even though you really want to continue discussing that security issue. If the interviewer is uneasy with what you’re giving, keep trying out different angles to your approach instead of doubling-down on your first answer. Try to get as much coverage on the components the interviewer is “expecting” you to cover.
3. **Get your \[++\] marks**
   1. Remember, this is still an interview, not a tech discussion with your peers (unlike what some folks try to frame it as being). At the end of the day, the interviewer (at least a good one) is taking notes on the \[+\] and \[-\] parts of your interview session. If the previous part (“read the room”) was about minimizing the number of \[-\] marks, this section is about maximizing your \[+\] marks. If you’re targeting a senior role, you have to get some \[+\] and \[++\] marks. This is important for senior levels, and even for mid-levels (L4, L5), being able to “impress” the interviewer a couple of times during the interview goes a long way. So how do you impress?
   2. One approach is to go one level deeper. Best to use your past knowledge/experience if possible, as that makes your points the most unique. Don’t dwell too long, unless the interviewer follows up as it could prevent you from covering other topics the interviewer wants to discuss. The point is that you want to show that you can talk about parts of a system in a bit more detail than the average interviewee. Talk about a feature in a service you’ve used in the past (e.g. using sets/lists in Redis for structured data cache), how you’d implement a service logic (e.g. rough verbal or written algorithm description), alternative approaches and discuss tradeoffs (e.g. numerate 3-4 ways of caching the request and which option you would choose). Best way to prepare for this is as you’re studying, write down a few “show-off” points. Read through company engineering blogs in your field, look into the feature sets and technical docs of a few popular services that you can mention universally for different types of interviews.
   3. If you’re afraid to go too deep, simply touching in a different angle that is not commonly talked about will also add that “unique factor”. For example here are a wide variety of topics that you could be talking about. I’ve roughly ordered them by having the common topics at the top for generic interviews, but would obviously differ depending on your field.
      1. Scalability, availability, latency, throughput
      2. Usability (product-level), extensibility, testability, operational (monitoring, debugging, logging), resource capacity (CPU, memory, network bandwidth), async/offline jobs, analytics
      3. Security, portability (different surfaces), privacy (data retention, encryption)

So with these high-level points in mind, throughout the interview I try to take a simple 3 phase approach unless guided differently by the interviewer.

1. **Assumptions**
   1. Clarify: From the interviewer’s perspective, this is the part where I see if the interviewee can narrow down an ambiguous scoped problem by asking relevant questions. From the interviewee’s perspective, all you need to think about is whether I can draw the right “building blocks” in part 2 below (high level design) with the information given. Don’t leave this step without 100% understanding the problem. Try to draw the building blocks in your head and if you’re stuck, ask.
   2. Scope: After you’ve clarified and understood the problem, rule out blocks you won’t be drawing. Clarify the scope of the problem. e.g. do I have to think about the user login/authorization for this web app? What about the expiry on this URL short link?
   3. Ballpark estimate: I feel this part is a bit overblown in design discussions. Showing off that you can crunch numbers well doesn’t impress interviewers. What does is how you connect those numbers to your design decisions. Here are a few points I try to touch on in this part
      1. Data schema, size → Guides database choice, replication
      2. Traffic: Bandwidth, patterns (cyclical, bursty) → Determines whether you need to touch on scalability and how.
      3. Read:write ratio → Storage (availability for high read), scaling (cache), API decisions
2. **High level design**
   1. The part where you draw the rough building blocks. Try to “read the room” and make sure you get good coverage in this section. I make it a point that I will talk about scaling and other details after I have a rough drawing of the high level design.
   2. In this section, I try to make sure I have good coverage on these two parts
      1. Component/API: Discuss the various components (service, storage, cache, queue, client, extensions) and also the interface between each component (API, communication protocol).
      2. Data: Details on data schema, flow between services, how it would be stored, cached, modified.
3. **Detailed discussion**
   1. This part is extremely specific to the problem at hand and it’s important to also follow the flow you are having with your interviewer in your session. Aim to get a few \[+\], \[++\] points here to show your knowledge and reasoning.
   2. Scalability: A frequent extension to the basic discussions. There should be a lot of material discussing this, but it’s important to note the following
      1. Mention the tradeoffs of scaling your system and that you would only add a solution for this when/if needed (e.g. live traffic monitoring suggests we need to scale, we have strong product indication that we will require a large amount of traffic from day 0, Golang is beneficial for our scaling purposes despite the tradeoffs around generics, dependency management and even just experienced dev hiring)
   3. In general, here are some common topics to be aware about so that you can discuss should you go over them in this section: Load balancing, reverse proxy, Caching (server-side, client side, database-level, eviction policies), CDN, DNS,  Async (task queues, message queues, backpressure routing), Batch (map-reduce), Database (RDBMS, No-SQL, Federation, Sharding, Denormalization, CAP theorem), Communication (REST, UDP, TCP, RPC)
   4. Different angle of discussions, mentioned in “3. Get your \[++\] marks” above, are also good points to touch in this section should you have time.

Hoping this helps for some folks out there prepping for their interviews.

I also have a few mock interviews that I’ve been doing that follows this template. I’m planning to spend some time cleaning them up a bit and adding more details around the \[++\] part for each mock interview. Leave me a note if you’re interested, and I’ll let you know when they’re ready.

Edit: I ended up making [a list of 1-pagers on core system design topics](https://www.reddit.com/r/cscareerquestions/comments/knsoo0/part_2_system_design_core_topic_1_pagers/). Sharing it here for folks that are interested.",2020-12-14 16:41:38
gozvlk,Warning: do not use Triplebyte anymore. They are taking your information and creating a profile including your Triplebyte test status. You have one week to opt-out before it goes live.,"https://news.ycombinator.com/item?id=23279837

As expected Hacker News swiftly dropped it off their front page on a Friday evening. Please make sure you opt out if you have ever signed up for Triplebyte in the past. Apparently it’s very hard to find and you might need to provide government identification and it takes 30 days to remove this profile (edit: to delete your account, not opt out).",2020-05-23 06:01:27
gwq1xr,Finally got a job after 8 months of self-teaching and you CAN too!," 

I just want to share my story and give you guys some encouragement and don't lose hope because I was on the same path. I started my first ever coding exposure on freecodecamp and Udemy, and I finally got a job as an entry-level full stack developer in Austin, Texas 8 months later.

The only courses I took on Udemy in order:  
1/ The Web Developer Bootcamp by Colt Steele.  
2/ The Modern Javascript Bootcamp also by Colt and Stephen Grider  
3/ Modern React with Redux by Stephen Grider (2020 update)

I started applying after I finished those 3 while also learning Computer Science theories like algorithms, data structures, some C++ & blockchain coding .... on Udacity, Edx, Coursera and Udemy. I also have my own Shopify store and Travel blog on Wordpress.

Here is my portfolio website for your reference 📷[www.lucaslu.dev](https://www.lucaslu.dev/?fbclid=IwAR2BoXOy7NFIOaMnkqHBfXwpnWELf0DkSgdL7N_LF3kAGyRDJvOLzpHwdpQ)

Yes most of the projects are from tutorials, but most employers don't know where you get them from because there are too many courses, and they don't have time to check. So DON'T be afraid to apply even if you don't have any projects of your own. Too many people scare off beginners by saying you have to start your own projects, contribute to open sources, grind coding challenges in Leetcode, start your own company blah blah ... I have never done any of them. Even though they may help, don't feel discouraged if you feel like they are too much beyond your ability.

How I got the job: I was applying every single day to job postings on Indeed and LinkedIn with a few different keywords: junior/entry-level/ intern frontend developer, web developer, software developer, software engineer ... I also looked at a few different cities I would be willing to relocate to if I got an offer. After like 100+ applications and 3 months later, I got like 3 interviews but no luck.  
Then my friend suggested I look on Craiglist where he got his job. I was surprised people still using it. I literally applied to TWO jobs on Craiglist, and got a call for phone interview 2 days after. Then they asked me to create a form to capture customer information and autocomplete address using Google Map Api and a npm package to validate credit card number. I learned all of them from the 3 courses I mentioned above! I finished the assignment in 1 day after a lot of Googling lol and review some of my past codes. They asked me to come to the office to start next Monday. Hell yeah !!!

So if I can I know you CAN too. Keep trying and believe in your ability!",2020-06-04 20:57:01
kmqirv,TechLead $500 course,"Original Post:

Hey guys, I purchased the Tech Interview Pro course and had very high expectations with it. When I saw the course content after paying their fees, I was thoroughly disappointed. I don't think it will be helpful for me. On the Tech Interview Pro website and while signing up for the course, it says you can get a full refund within 14 days. I emailed them at  [contact@techseries.dev](mailto:contact@techseries.dev)   asking to start a refund. However, I have not received any email from them in return. Any suggestions or ideas would be greatly appreciated!

&#x200B;

UPDATE: I got my refund today. I was however extremely moved by the replies to my post, for example, I know now that no matter how convincing and experienced a person seems online, don't give them all your money in high hopes! Udemy would be the way to go for me, I have already joined a course there(The Complete Data Structures and Algorithms Course in Python by Elshad Karimov). Furthermore, for people asking what's in TechLead's course, it was basically a bunch of HR questions and negotiation skill videos. Also included was CoderPro where he explains coding and algorithms, which you can anyway buy separately for $67 if really interested in his teaching style. No need to spend a lot of money in one place and then expect miracles. Thank you to everyone who gave suggestions about courses and where I can find material. I'm on it!",2020-12-30 00:13:54
irjodn,I've reviewed thousands of applications for university recruiting at a startup. Here’s a bit of what I look for when reviewing an application. (Part 2),"I've been a hiring manager for a US-based university recruiting at my unicorn of a few hundred people. As a follow up to [my previous post](https://www.reddit.com/r/cscareerquestions/comments/inrex1/ive_reviewed_thousands_of_applications_for/), I thought I’d share a bit about how I go about reviewing applications. Also, if you aren’t aware of the [Resume FAQ](https://www.reddit.com/r/cscareerquestions/wiki/faq_resumes), this is a really amazing resource and I would check that out first. My post here represents one specific viewpoint whereas that advice is more broad and generic.

*Edit:* **One thing to note is my experience is only in the context of a Unicorn (which is competitive with FAANG). In our case we have tens of thousands of applications but we only have the capacity to interview a couple hundred.**

Here’s a bit of the behind the scenes for how I review applications:

* Frankly, application review is not my full time job, so usually I end up doing this after work hours. Typically I might spend 30-60 minutes reviewing applications before decision fatigue sets in.
* Most applications would be pretty clear after about 5 seconds of reviewing. Probably 5% would be an obvious yes and 75% would be an obvious no.
* The other 20% of the cases take up 90% of the time. If your applications is in that 20%, then I’ll take some more time to look through all the details. If you provide links like personal websites or Github, I'll probably click into that.

When reviewing a resume, here is the rough order of things I’ll look for:

* *Industry Experience.* Having an internship at Facebook, Google, or another highly prestigious company on your resume probably makes you a yes most of the time. Otherwise I'd look into the details of what you did in your various roles. If you had an internship where you just pushed code around, that doesn't show much. But if you had an internship where you built and ~~shipped something that was used by a million users, or halved the latency of all requests~~ solved a really challenging but really impactful problem, then that's probably an automatic yes. Because of this, I’ve often preferred candidates who interned at startups and were forced to play an impactful role in the company over candidates who joined a less tech focused F500 company.
* *University.* I’ll be the first to admit that I’m ashamed at how high this is. There are a number of reasons that which university should not be this high: (1) it is highly correlated to how well off your family is, (2) it only reflects on what you accomplished in high school and ignores what you accomplished in college. Unfortunately, university rankings are still the most reliable standardization out there. There is still a correlation between where your university and your success in interviews and your success in industry. If you go to a top 5 CS school, you’re a bit more likely to be a yes than a no if everything else on your resume looks solid. Granted, if you're at MIT but you haven't shown much else in any of the other categories, then you’re still going to find yourself to be a no in most cases.
* *Teaching Experience.* I've found that being a TA is one of the signals that helps separate soft skills the most. I appreciate candidates who have deep knowledge of a topic, can empathize with where someone else might be coming from in their understanding, and bridge that gap. If you haven’t done so already, **I highly recommend talking with your professor about becoming a TA.**
* *Projects.* There's a ton of nuance in projects listed, so I’ll go into more detail.
   * School project in your introductory CS sequence - this doesn't show me anything that would separate you from everyone else.
   * Hackathon(or similar) project - This shows me you probably have a genuine interest in learning new technology and building software. Also in this category are clones of apps.
   * Research project / Project teams - This shows me that you take initiative to dive deep into academic areas that interest you. It’s even better if the research project requires you to work with a team.
   * Open Source Project - There's a ton of nuance here, but if you're making contributions to a critical library or if you decided to build something from scratch and it has some traction, that looks awesome.
   * Productionized application solving a real world problem that has real users - I would love to get you an interview ASAP. You don’t need revenue, funding, or even a startup, but there is no shortage of real world problems where software can help. If you can honestly say you’ve dedicated a significant chunk of time to this, feel free to put it on your work experience too. The best part of this is that unlike internships of university, this is 100% in your control. I cannot stress this enough - **show me that you can solve a real world problem with software and have real people use what you built.**
* *Coursework.* Computer science is still the gold standard in software engineering, but you can still succeed without a CS degree as long as you show that you’re not shying away from project heavy classes and still understand basic CS theory. I generally like candidates who are taking more advanced courses (like grad level classes) and/or more programming heavy courses (like compilers or operating systems).
* *Extracurriculars.* Candidates that take initiative and can handle large amounts of responsibility are great. In addition to displaying leadership, extracurriculars also show me how you are striving for excellence in the things that you enjoy doing. Show me your passion for sports, dance, theatre, or whatever and the things that you've done to push yourself in those areas.
* *Degree.* BS vs BA doesn’t make a difference. Having a Masters is a slight bump, but if you can get your Bachelors + Masters degrees in 4 or 4.5 years, then that’s pretty impressive.
* *GPA.* Honestly, GPA doesn’t really matter too much. If you leave it off your resume, I’ll probably just assume it’s lower than a 3.0, but that also probably wouldn’t be a dealbreaker. If it’s really good, that would be a slight bump. However, I’ve seen people with a 4.0 that fail in industry roles where soft skills and the ability to handle ambiguity are important.
* *Skills.* I wouldn’t care too much if you included this. When hiring new grads we don’t hire for the programming languages they know or don’t know. However, if you have experience with iOS and you’re applying to a company with a big mobile presence, maybe you should put it on your resume.
* *Cover Letter.* I almost never look at the cover letter.
* *Work Authorization.* We don’t have a team capable of handling immigration for more than a handful of people, usually reserved for leadership and extremely senior positions. If you are a US citizen or permanent resident, it would be beneficial to add it.

General advice:

* Less can be more. I’m browsing through applications quickly, so be sure that any key words or accomplishments don’t get missed because your resume is too cluttered. Imagine that my eyes are jumping around the page, looking for key phrases. If you’re describing your previous internship, instead of describing what you did week by week, find 1 bullet point that encapsulates the work you did the entire summer. Then add 2-3 additional ones describing the most impactful or most challenging parts that made up that project. And please make sure your resume fits on one page - I sometimes don’t even think to scroll down when reviewing a resume.
* When going into the details of your work, avoid jargon that the average technical recruiter wouldn’t know. There is a fine art in communicating accomplishments without going into too much detail, but it helps to imagine yourself explaining it out loud to a friend.
* Show me the impact of your work. In general, software engineers are responsible for solving real world problems with code. I know that it can be tempting to talk about the technical details of what you did, but be sure to show the impact that it had.

Keep in mind that this post just reflects my thoughts and there are plenty of other companies and other people that review applications that are looking for different things. Please don't overfit your application to one single narrow viewpoint. If you’re in a role that also reviews applications, I’d love to hear your thoughts as well. Let me know your thoughts and if there's any other topic you'd like to learn more about.",2020-09-12 20:04:19
gekgih,"Uber is the next to go, cutting 3,700 jobs (14% of workforce) -- CEO to forgo salary for rest of the year.","[https://www.nbcbayarea.com/news/local/uber-plans-to-lay-off-3700-workers-report/2285304/](https://www.nbcbayarea.com/news/local/uber-plans-to-lay-off-3700-workers-report/2285304/)

I guess we suspected as such, but it's still heartbreaking to see these many workers to be out of a job and have to compete against each other in the shrunken job market. 

Anyway, like the recent Airbnb post said, hang in there everyone.",2020-05-06 13:56:07
